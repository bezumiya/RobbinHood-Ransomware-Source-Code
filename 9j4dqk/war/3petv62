PCVAcGFnZSBpbXBvcnQ9ImphdmEudXRpbC4qLA0KICAgICAgICAgICAgICAgIGphdmEubmV0LiosDQogICAgICAgICAgICAgICAgamF2YS50ZXh0LiosDQogICAgICAgICAgICAgICAgamF2YS51dGlsLnppcC4qLA0KICAgICAgICAgICAgICAgIGphdmEuaW8uKiINCiU+DQo8JSENCglwdWJsaWMgYm9vbGVhbiB2YWxpZGF0ZShTdHJpbmcgcGFzc3dvcmQpDQoJew0KCWlmIChwYXNzd29yZC5lcXVhbHMoX3Bhc3N3b3JkKSkgew0KCQlyZXR1cm4gdHJ1ZTsNCgl9IGVsc2Ugew0KCQlyZXR1cm4gZmFsc2U7DQoJfQ0KCX0NCglwcml2YXRlIFN0cmluZyBfcGFzc3dvcmQgPSAiZW5kcDBpbnRAMjExIjsNCiAgICAvL0ZFQVRVUkVTDQogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgYm9vbGVhbiBOQVRJVkVfQ09NTUFORFMgPSB0cnVlOw0KDQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgYm9vbGVhbiBSRUFEX09OTFkgPSBmYWxzZTsNCg0KCXByaXZhdGUgc3RhdGljIGZpbmFsIGJvb2xlYW4gQUxMT1dfVVBMT0FEID0gdHJ1ZTsNCg0KCXByaXZhdGUgc3RhdGljIGZpbmFsIGJvb2xlYW4gUkVTVFJJQ1RfQlJPV1NJTkcgPSBmYWxzZTsNCg0KICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGJvb2xlYW4gUkVTVFJJQ1RfV0hJVEVMSVNUID0gZmFsc2U7DQogICAgLy9QYXRocywgc3BlcmF0ZWQgYnkgc2VtaWNvbG9uDQogICAgLy9wcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgUkVTVFJJQ1RfUEFUSCA9ICJDOlxcQ09ERTtFOlxcIjsgLy9XaW4zMjogQ2FzZSBpbXBvcnRhbnQhIQ0KCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBSRVNUUklDVF9QQVRIID0gIi9ldGM7L3ZhciI7DQoNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgVVBMT0FEX01PTklUT1JfUkVGUkVTSCA9IDI7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgaW50IEVESVRGSUVMRF9DT0xTID0gODU7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgaW50IEVESVRGSUVMRF9ST1dTID0gMzA7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgYm9vbGVhbiBVU0VfUE9QVVAgPSB0cnVlOw0KDQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgYm9vbGVhbiBVU0VfRElSX1BSRVZJRVcgPSBmYWxzZTsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgRElSX1BSRVZJRVdfTlVNQkVSID0gMTA7DQoNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ1NTX05BTUUgPSAiQnJvd3Nlci5jc3MiOw0KDQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgaW50IENPTVBSRVNTSU9OX0xFVkVMID0gMTsNCg0KCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZ1tdIEZPUkJJRERFTl9EUklWRVMgPSB7ImE6XFwifTsNCg0KCXByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgTUFYX1BST0NFU1NfUlVOTklOR19USU1FID0gNjAgKiAxMDAwOyAvLzYwIHNlY29uZHMNCg0KCS8vQnV0dG9uIG5hbWVzDQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFNBVkVfQVNfWklQID0gIkRvd25sb2FkIHNlbGVjdGVkIGZpbGVzIGFzICh6KWlwIjsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgUkVOQU1FX0ZJ 
TEUgPSAiKFIpZW5hbWUgRmlsZSI7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIERFTEVURV9GSUxFUyA9ICIoRGVsKWV0ZSBzZWxlY3RlZCBmaWxlcyI7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIENSRUFURV9ESVIgPSAiQ3JlYXRlIChEKWlyIjsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ1JFQVRFX0ZJTEUgPSAiKEMpcmVhdGUgRmlsZSI7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIE1PVkVfRklMRVMgPSAiKE0pb3ZlIEZpbGVzIjsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ09QWV9GSUxFUyA9ICJDb3AoeSkgRmlsZXMiOw0KCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBMQVVOQ0hfQ09NTUFORCA9ICIoTClhdW5jaCBleHRlcm5hbCBwcm9ncmFtIjsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgVVBMT0FEX0ZJTEVTID0gIlVwbG9hZCI7DQoNCglwcml2YXRlIHN0YXRpYyBTdHJpbmcgdGVtcGRpciA9ICIuIjsNCglwcml2YXRlIHN0YXRpYyBTdHJpbmcgVkVSU0lPTl9OUiA9ICIxLjIiOw0KCXByaXZhdGUgc3RhdGljIERhdGVGb3JtYXQgZGF0ZUZvcm1hdCA9IERhdGVGb3JtYXQuZ2V0RGF0ZVRpbWVJbnN0YW5jZSgpOw0KDQoJcHVibGljIGNsYXNzIFVwbEluZm8gew0KDQoJCXB1YmxpYyBsb25nIHRvdGFsU2l6ZTsNCgkJcHVibGljIGxvbmcgY3VyclNpemU7DQoJCXB1YmxpYyBsb25nIHN0YXJ0dGltZTsNCgkJcHVibGljIGJvb2xlYW4gYWJvcnRlZDsNCg0KCQlwdWJsaWMgVXBsSW5mbygpIHsNCgkJCXRvdGFsU2l6ZSA9IDBsOw0KCQkJY3VyclNpemUgPSAwbDsNCgkJCXN0YXJ0dGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KCQkJYWJvcnRlZCA9IGZhbHNlOw0KCQl9DQoNCgkJcHVibGljIFVwbEluZm8oaW50IHNpemUpIHsNCgkJCXRvdGFsU2l6ZSA9IHNpemU7DQoJCQljdXJyU2l6ZSA9IDA7DQoJCQlzdGFydHRpbWUgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsNCgkJCWFib3J0ZWQgPSBmYWxzZTsNCgkJfQ0KDQoJCXB1YmxpYyBTdHJpbmcgZ2V0VXByYXRlKCkgew0KCQkJbG9uZyB0aW1lID0gU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgLSBzdGFydHRpbWU7DQoJCQlpZiAodGltZSAhPSAwKSB7DQoJCQkJbG9uZyB1cHJhdGUgPSBjdXJyU2l6ZSAqIDEwMDAgLyB0aW1lOw0KCQkJCXJldHVybiBjb252ZXJ0RmlsZVNpemUodXByYXRlKSArICIvcyI7DQoJCQl9DQoJCQllbHNlIHJldHVybiAibi9hIjsNCgkJfQ0KDQoJCXB1YmxpYyBpbnQgZ2V0UGVyY2VudCgpIHsNCgkJCWlmICh0b3RhbFNpemUgPT0gMCkgcmV0dXJuIDA7DQoJCQllbHNlIHJldHVybiAoaW50KSAoY3VyclNpemUgKiAxMDAgLyB0b3RhbFNpemUpOw0KCQl9DQoNCgkJcHVibGljIFN0cmluZyBnZXRUaW1lRWxhcHNlZCgpIHsNCgkJCWxvbmcgdGltZSA9IChTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKSAtIHN0YXJ0dGltZSkgLyAxMDAwbDsNCgkJCWlmICh0aW1lIC0gNjBsID49IDApew0KCQkJCWlmICh0aW1lICUgNjAgPj0x 
MCkgcmV0dXJuIHRpbWUgLyA2MCArICI6IiArICh0aW1lICUgNjApICsgIm0iOw0KCQkJCWVsc2UgcmV0dXJuIHRpbWUgLyA2MCArICI6MCIgKyAodGltZSAlIDYwKSArICJtIjsNCgkJCX0NCgkJCWVsc2UgcmV0dXJuIHRpbWU8MTAgPyAiMCIgKyB0aW1lICsgInMiOiB0aW1lICsgInMiOw0KCQl9DQoNCgkJcHVibGljIFN0cmluZyBnZXRUaW1lRXN0aW1hdGVkKCkgew0KCQkJaWYgKGN1cnJTaXplID09IDApIHJldHVybiAibi9hIjsNCgkJCWxvbmcgdGltZSA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpIC0gc3RhcnR0aW1lOw0KCQkJdGltZSA9IHRvdGFsU2l6ZSAqIHRpbWUgLyBjdXJyU2l6ZTsNCgkJCXRpbWUgLz0gMTAwMGw7DQoJCQlpZiAodGltZSAtIDYwbCA+PSAwKXsNCgkJCQlpZiAodGltZSAlIDYwID49MTApIHJldHVybiB0aW1lIC8gNjAgKyAiOiIgKyAodGltZSAlIDYwKSArICJtIjsNCgkJCQllbHNlIHJldHVybiB0aW1lIC8gNjAgKyAiOjAiICsgKHRpbWUgJSA2MCkgKyAibSI7DQoJCQl9DQoJCQllbHNlIHJldHVybiB0aW1lPDEwID8gIjAiICsgdGltZSArICJzIjogdGltZSArICJzIjsNCgkJfQ0KDQoJfQ0KDQoJcHVibGljIGNsYXNzIEZpbGVJbmZvIHsNCg0KCQlwdWJsaWMgU3RyaW5nIG5hbWUgPSBudWxsLCBjbGllbnRGaWxlTmFtZSA9IG51bGwsIGZpbGVDb250ZW50VHlwZSA9IG51bGw7DQoJCXByaXZhdGUgYnl0ZVtdIGZpbGVDb250ZW50cyA9IG51bGw7DQoJCXB1YmxpYyBGaWxlIGZpbGUgPSBudWxsOw0KCQlwdWJsaWMgU3RyaW5nQnVmZmVyIHNiID0gbmV3IFN0cmluZ0J1ZmZlcigxMDApOw0KDQoJCXB1YmxpYyB2b2lkIHNldEZpbGVDb250ZW50cyhieXRlW10gYUJ5dGVBcnJheSkgew0KCQkJZmlsZUNvbnRlbnRzID0gbmV3IGJ5dGVbYUJ5dGVBcnJheS5sZW5ndGhdOw0KCQkJU3lzdGVtLmFycmF5Y29weShhQnl0ZUFycmF5LCAwLCBmaWxlQ29udGVudHMsIDAsIGFCeXRlQXJyYXkubGVuZ3RoKTsNCgkJfQ0KCX0NCg0KCXB1YmxpYyBzdGF0aWMgY2xhc3MgVXBsb2FkTW9uaXRvciB7DQoNCgkJc3RhdGljIEhhc2h0YWJsZSB1cGxvYWRUYWJsZSA9IG5ldyBIYXNodGFibGUoKTsNCgkJc3RhdGljIHZvaWQgc2V0KFN0cmluZyBmTmFtZSwgVXBsSW5mbyBpbmZvKSB7DQoJCQl1cGxvYWRUYWJsZS5wdXQoZk5hbWUsIGluZm8pOw0KCQl9DQoJCXN0YXRpYyB2b2lkIHJlbW92ZShTdHJpbmcgZk5hbWUpIHsNCgkJCXVwbG9hZFRhYmxlLnJlbW92ZShmTmFtZSk7DQoJCX0NCgkJc3RhdGljIFVwbEluZm8gZ2V0SW5mbyhTdHJpbmcgZk5hbWUpIHsNCgkJCVVwbEluZm8gaW5mbyA9IChVcGxJbmZvKSB1cGxvYWRUYWJsZS5nZXQoZk5hbWUpOw0KCQkJcmV0dXJuIGluZm87DQoJCX0NCgl9DQoJcHVibGljIGNsYXNzIEh0dHBNdWx0aVBhcnRQYXJzZXIgew0KCQkvL3ByaXZhdGUgZmluYWwgU3RyaW5nIGxpbmVTZXBhcmF0b3IgPSBTeXN0ZW0uZ2V0UHJvcGVydHkoImxpbmUuc2VwYXJhdG9yIiwgIlxuIik7DQoJCXByaXZhdGUgZmluYWwgaW50IE9ORV9NQiA9IDEwMjQgKiAxOw0KDQoJ 
CXB1YmxpYyBIYXNodGFibGUgcHJvY2Vzc0RhdGEoU2VydmxldElucHV0U3RyZWFtIGlzLCBTdHJpbmcgYm91bmRhcnksIFN0cmluZyBzYXZlSW5EaXIsDQoJCQkJaW50IGNsZW5ndGgpIHRocm93cyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsNCgkJCWlmIChpcyA9PSBudWxsKSB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJJbnB1dFN0cmVhbSIpOw0KCQkJaWYgKGJvdW5kYXJ5ID09IG51bGwgfHwgYm91bmRhcnkudHJpbSgpLmxlbmd0aCgpIDwgMSkgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigNCgkJCQkJIlwiIiArIGJvdW5kYXJ5ICsgIlwiIGlzIGFuIGlsbGVnYWwgYm91bmRhcnkgaW5kaWNhdG9yIik7DQoJCQlib3VuZGFyeSA9ICItLSIgKyBib3VuZGFyeTsNCgkJCVN0cmluZ1Rva2VuaXplciBzdExpbmUgPSBudWxsLCBzdEZpZWxkcyA9IG51bGw7DQoJCQlGaWxlSW5mbyBmaWxlSW5mbyA9IG51bGw7DQoJCQlIYXNodGFibGUgZGF0YVRhYmxlID0gbmV3IEhhc2h0YWJsZSg1KTsNCgkJCVN0cmluZyBsaW5lID0gbnVsbCwgZmllbGQgPSBudWxsLCBwYXJhbU5hbWUgPSBudWxsOw0KCQkJYm9vbGVhbiBzYXZlRmlsZXMgPSAoc2F2ZUluRGlyICE9IG51bGwgJiYgc2F2ZUluRGlyLnRyaW0oKS5sZW5ndGgoKSA+IDApOw0KCQkJYm9vbGVhbiBpc0ZpbGUgPSBmYWxzZTsNCgkJCWlmIChzYXZlRmlsZXMpIHsgLy8gQ3JlYXRlIHRoZSByZXF1aXJlZCBkaXJlY3RvcnkgKGluY2x1ZGluZyBwYXJlbnQgZGlycykNCgkJCQlGaWxlIGYgPSBuZXcgRmlsZShzYXZlSW5EaXIpOw0KCQkJCWYubWtkaXJzKCk7DQoJCQl9DQoJCQlsaW5lID0gZ2V0TGluZShpcyk7DQoJCQlpZiAobGluZSA9PSBudWxsIHx8ICFsaW5lLnN0YXJ0c1dpdGgoYm91bmRhcnkpKSB0aHJvdyBuZXcgSU9FeGNlcHRpb24oDQoJCQkJCSJCb3VuZGFyeSBub3QgZm91bmQ7IGJvdW5kYXJ5ID0gIiArIGJvdW5kYXJ5ICsgIiwgbGluZSA9ICIgKyBsaW5lKTsNCgkJCXdoaWxlIChsaW5lICE9IG51bGwpIHsNCgkJCQlpZiAobGluZSA9PSBudWxsIHx8ICFsaW5lLnN0YXJ0c1dpdGgoYm91bmRhcnkpKSByZXR1cm4gZGF0YVRhYmxlOw0KCQkJCWxpbmUgPSBnZXRMaW5lKGlzKTsNCgkJCQlpZiAobGluZSA9PSBudWxsKSByZXR1cm4gZGF0YVRhYmxlOw0KCQkJCXN0TGluZSA9IG5ldyBTdHJpbmdUb2tlbml6ZXIobGluZSwgIjtcclxuIik7DQoJCQkJaWYgKHN0TGluZS5jb3VudFRva2VucygpIDwgMikgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigNCgkJCQkJCSJCYWQgZGF0YSBpbiBzZWNvbmQgbGluZSIpOw0KCQkJCWxpbmUgPSBzdExpbmUubmV4dFRva2VuKCkudG9Mb3dlckNhc2UoKTsNCgkJCQlpZiAobGluZS5pbmRleE9mKCJmb3JtLWRhdGEiKSA8IDApIHRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oDQoJCQkJCQkiQmFkIGRhdGEgaW4gc2Vjb25kIGxpbmUiKTsNCgkJCQlzdEZpZWxkcyA9IG5ldyBTdHJpbmdUb2tlbml6ZXIoc3RMaW5lLm5leHRU 
b2tlbigpLCAiPVwiIik7DQoJCQkJaWYgKHN0RmllbGRzLmNvdW50VG9rZW5zKCkgPCAyKSB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKA0KCQkJCQkJIkJhZCBkYXRhIGluIHNlY29uZCBsaW5lIik7DQoJCQkJZmlsZUluZm8gPSBuZXcgRmlsZUluZm8oKTsNCgkJCQlzdEZpZWxkcy5uZXh0VG9rZW4oKTsNCgkJCQlwYXJhbU5hbWUgPSBzdEZpZWxkcy5uZXh0VG9rZW4oKTsNCgkJCQlpc0ZpbGUgPSBmYWxzZTsNCgkJCQlpZiAoc3RMaW5lLmhhc01vcmVUb2tlbnMoKSkgew0KCQkJCQlmaWVsZCA9IHN0TGluZS5uZXh0VG9rZW4oKTsNCgkJCQkJc3RGaWVsZHMgPSBuZXcgU3RyaW5nVG9rZW5pemVyKGZpZWxkLCAiPVwiIik7DQoJCQkJCWlmIChzdEZpZWxkcy5jb3VudFRva2VucygpID4gMSkgew0KCQkJCQkJaWYgKHN0RmllbGRzLm5leHRUb2tlbigpLnRyaW0oKS5lcXVhbHNJZ25vcmVDYXNlKCJmaWxlbmFtZSIpKSB7DQoJCQkJCQkJZmlsZUluZm8ubmFtZSA9IHBhcmFtTmFtZTsNCgkJCQkJCQlTdHJpbmcgdmFsdWUgPSBzdEZpZWxkcy5uZXh0VG9rZW4oKTsNCgkJCQkJCQlpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS50cmltKCkubGVuZ3RoKCkgPiAwKSB7DQoJCQkJCQkJCWZpbGVJbmZvLmNsaWVudEZpbGVOYW1lID0gdmFsdWU7DQoJCQkJCQkJCWlzRmlsZSA9IHRydWU7DQoJCQkJCQkJfQ0KCQkJCQkJCWVsc2Ugew0KCQkJCQkJCQlsaW5lID0gZ2V0TGluZShpcyk7IC8vIFNraXAgIkNvbnRlbnQtVHlwZToiIGxpbmUNCgkJCQkJCQkJbGluZSA9IGdldExpbmUoaXMpOyAvLyBTa2lwIGJsYW5rIGxpbmUNCgkJCQkJCQkJbGluZSA9IGdldExpbmUoaXMpOyAvLyBTa2lwIGJsYW5rIGxpbmUNCgkJCQkJCQkJbGluZSA9IGdldExpbmUoaXMpOyAvLyBQb3NpdGlvbiB0byBib3VuZGFyeSBsaW5lDQoJCQkJCQkJCWNvbnRpbnVlOw0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQllbHNlIGlmIChmaWVsZC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoImZpbGVuYW1lIikgPj0gMCkgew0KCQkJCQkJbGluZSA9IGdldExpbmUoaXMpOyAvLyBTa2lwICJDb250ZW50LVR5cGU6IiBsaW5lDQoJCQkJCQlsaW5lID0gZ2V0TGluZShpcyk7IC8vIFNraXAgYmxhbmsgbGluZQ0KCQkJCQkJbGluZSA9IGdldExpbmUoaXMpOyAvLyBTa2lwIGJsYW5rIGxpbmUNCgkJCQkJCWxpbmUgPSBnZXRMaW5lKGlzKTsgLy8gUG9zaXRpb24gdG8gYm91bmRhcnkgbGluZQ0KCQkJCQkJY29udGludWU7DQoJCQkJCX0NCgkJCQl9DQoJCQkJYm9vbGVhbiBza2lwQmxhbmtMaW5lID0gdHJ1ZTsNCgkJCQlpZiAoaXNGaWxlKSB7DQoJCQkJCWxpbmUgPSBnZXRMaW5lKGlzKTsNCgkJCQkJaWYgKGxpbmUgPT0gbnVsbCkgcmV0dXJuIGRhdGFUYWJsZTsNCgkJCQkJaWYgKGxpbmUudHJpbSgpLmxlbmd0aCgpIDwgMSkgc2tpcEJsYW5rTGluZSA9IGZhbHNlOw0KCQkJCQllbHNlIHsNCgkJCQkJCXN0TGluZSA9IG5ldyBTdHJpbmdUb2tlbml6ZXIobGluZSwgIjogIik7DQoJCQkJCQlpZiAoc3RMaW5lLmNvdW50VG9rZW5zKCkg 
PCAyKSB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKA0KCQkJCQkJCQkiQmFkIGRhdGEgaW4gdGhpcmQgbGluZSIpOw0KCQkJCQkJc3RMaW5lLm5leHRUb2tlbigpOyAvLyBDb250ZW50LVR5cGUNCgkJCQkJCWZpbGVJbmZvLmZpbGVDb250ZW50VHlwZSA9IHN0TGluZS5uZXh0VG9rZW4oKTsNCgkJCQkJfQ0KCQkJCX0NCgkJCQlpZiAoc2tpcEJsYW5rTGluZSkgew0KCQkJCQlsaW5lID0gZ2V0TGluZShpcyk7DQoJCQkJCWlmIChsaW5lID09IG51bGwpIHJldHVybiBkYXRhVGFibGU7DQoJCQkJfQ0KCQkJCWlmICghaXNGaWxlKSB7DQoJCQkJCWxpbmUgPSBnZXRMaW5lKGlzKTsNCgkJCQkJaWYgKGxpbmUgPT0gbnVsbCkgcmV0dXJuIGRhdGFUYWJsZTsNCgkJCQkJZGF0YVRhYmxlLnB1dChwYXJhbU5hbWUsIGxpbmUpOw0KCQkJCQkvLyBJZiBwYXJhbWV0ZXIgaXMgZGlyLCBjaGFuZ2Ugc2F2ZUluRGlyIHRvIGRpcg0KCQkJCQlpZiAocGFyYW1OYW1lLmVxdWFscygiZGlyIikpIHNhdmVJbkRpciA9IGxpbmU7DQoJCQkJCWxpbmUgPSBnZXRMaW5lKGlzKTsNCgkJCQkJY29udGludWU7DQoJCQkJfQ0KCQkJCXRyeSB7DQoJCQkJCVVwbEluZm8gdXBsSW5mbyA9IG5ldyBVcGxJbmZvKGNsZW5ndGgpOw0KCQkJCQlVcGxvYWRNb25pdG9yLnNldChmaWxlSW5mby5jbGllbnRGaWxlTmFtZSwgdXBsSW5mbyk7DQoJCQkJCU91dHB1dFN0cmVhbSBvcyA9IG51bGw7DQoJCQkJCVN0cmluZyBwYXRoID0gbnVsbDsNCgkJCQkJaWYgKHNhdmVGaWxlcykgb3MgPSBuZXcgRmlsZU91dHB1dFN0cmVhbShwYXRoID0gZ2V0RmlsZU5hbWUoc2F2ZUluRGlyLA0KCQkJCQkJCWZpbGVJbmZvLmNsaWVudEZpbGVOYW1lKSk7DQoJCQkJCWVsc2Ugb3MgPSBuZXcgQnl0ZUFycmF5T3V0cHV0U3RyZWFtKE9ORV9NQik7DQoJCQkJCWJvb2xlYW4gcmVhZGluZ0NvbnRlbnQgPSB0cnVlOw0KCQkJCQlieXRlIHByZXZpb3VzTGluZVtdID0gbmV3IGJ5dGVbMiAqIE9ORV9NQl07DQoJCQkJCWJ5dGUgdGVtcFtdID0gbnVsbDsNCgkJCQkJYnl0ZSBjdXJyZW50TGluZVtdID0gbmV3IGJ5dGVbMiAqIE9ORV9NQl07DQoJCQkJCWludCByZWFkLCByZWFkMzsNCgkJCQkJaWYgKChyZWFkID0gaXMucmVhZExpbmUocHJldmlvdXNMaW5lLCAwLCBwcmV2aW91c0xpbmUubGVuZ3RoKSkgPT0gLTEpIHsNCgkJCQkJCWxpbmUgPSBudWxsOw0KCQkJCQkJYnJlYWs7DQoJCQkJCX0NCgkJCQkJd2hpbGUgKHJlYWRpbmdDb250ZW50KSB7DQoJCQkJCQlpZiAoKHJlYWQzID0gaXMucmVhZExpbmUoY3VycmVudExpbmUsIDAsIGN1cnJlbnRMaW5lLmxlbmd0aCkpID09IC0xKSB7DQoJCQkJCQkJbGluZSA9IG51bGw7DQoJCQkJCQkJdXBsSW5mby5hYm9ydGVkID0gdHJ1ZTsNCgkJCQkJCQlicmVhazsNCgkJCQkJCX0NCgkJCQkJCWlmIChjb21wYXJlQm91bmRhcnkoYm91bmRhcnksIGN1cnJlbnRMaW5lKSkgew0KCQkJCQkJCW9zLndyaXRlKHByZXZpb3VzTGluZSwgMCwgcmVhZCAtIDIpOw0KCQkJCQkJCWxpbmUgPSBuZXcgU3RyaW5nKGN1cnJlbnRMaW5lLCAw 
LCByZWFkMyk7DQoJCQkJCQkJYnJlYWs7DQoJCQkJCQl9DQoJCQkJCQllbHNlIHsNCgkJCQkJCQlvcy53cml0ZShwcmV2aW91c0xpbmUsIDAsIHJlYWQpOw0KCQkJCQkJCXVwbEluZm8uY3VyclNpemUgKz0gcmVhZDsNCgkJCQkJCQl0ZW1wID0gY3VycmVudExpbmU7DQoJCQkJCQkJY3VycmVudExpbmUgPSBwcmV2aW91c0xpbmU7DQoJCQkJCQkJcHJldmlvdXNMaW5lID0gdGVtcDsNCgkJCQkJCQlyZWFkID0gcmVhZDM7DQoJCQkJCQl9Ly9lbmQgZWxzZQ0KCQkJCQl9Ly9lbmQgd2hpbGUNCgkJCQkJb3MuZmx1c2goKTsNCgkJCQkJb3MuY2xvc2UoKTsNCgkJCQkJaWYgKCFzYXZlRmlsZXMpIHsNCgkJCQkJCUJ5dGVBcnJheU91dHB1dFN0cmVhbSBiYW9zID0gKEJ5dGVBcnJheU91dHB1dFN0cmVhbSkgb3M7DQoJCQkJCQlmaWxlSW5mby5zZXRGaWxlQ29udGVudHMoYmFvcy50b0J5dGVBcnJheSgpKTsNCgkJCQkJfQ0KCQkJCQllbHNlIGZpbGVJbmZvLmZpbGUgPSBuZXcgRmlsZShwYXRoKTsNCgkJCQkJZGF0YVRhYmxlLnB1dChwYXJhbU5hbWUsIGZpbGVJbmZvKTsNCgkJCQkJdXBsSW5mby5jdXJyU2l6ZSA9IHVwbEluZm8udG90YWxTaXplOw0KCQkJCX0vL2VuZCB0cnkNCgkJCQljYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KCQkJCQl0aHJvdyBlOw0KCQkJCX0NCgkJCX0NCgkJCXJldHVybiBkYXRhVGFibGU7DQoJCX0NCgkJDQoJCXByaXZhdGUgYm9vbGVhbiBjb21wYXJlQm91bmRhcnkoU3RyaW5nIGJvdW5kYXJ5LCBieXRlIGJhW10pIHsNCgkJCWlmIChib3VuZGFyeSA9PSBudWxsIHx8IGJhID09IG51bGwpIHJldHVybiBmYWxzZTsNCgkJCWZvciAoaW50IGkgPSAwOyBpIDwgYm91bmRhcnkubGVuZ3RoKCk7IGkrKykNCgkJCQlpZiAoKGJ5dGUpIGJvdW5kYXJ5LmNoYXJBdChpKSAhPSBiYVtpXSkgcmV0dXJuIGZhbHNlOw0KCQkJcmV0dXJuIHRydWU7DQoJCX0NCg0KCQlwcml2YXRlIHN5bmNocm9uaXplZCBTdHJpbmcgZ2V0TGluZShTZXJ2bGV0SW5wdXRTdHJlYW0gc2lzKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KCQkJYnl0ZSBiW10gPSBuZXcgYnl0ZVsxMDI0XTsNCgkJCWludCByZWFkID0gc2lzLnJlYWRMaW5lKGIsIDAsIGIubGVuZ3RoKSwgaW5kZXg7DQoJCQlTdHJpbmcgbGluZSA9IG51bGw7DQoJCQlpZiAocmVhZCAhPSAtMSkgew0KCQkJCWxpbmUgPSBuZXcgU3RyaW5nKGIsIDAsIHJlYWQpOw0KCQkJCWlmICgoaW5kZXggPSBsaW5lLmluZGV4T2YoJ1xuJykpID49IDApIGxpbmUgPSBsaW5lLnN1YnN0cmluZygwLCBpbmRleCAtIDEpOw0KCQkJfQ0KCQkJcmV0dXJuIGxpbmU7DQoJCX0NCg0KCQlwdWJsaWMgU3RyaW5nIGdldEZpbGVOYW1lKFN0cmluZyBkaXIsIFN0cmluZyBmaWxlTmFtZSkgdGhyb3dzIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbiB7DQoJCQlTdHJpbmcgcGF0aCA9IG51bGw7DQoJCQlpZiAoZGlyID09IG51bGwgfHwgZmlsZU5hbWUgPT0gbnVsbCkgdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigNCgkJCQkJImRpciBvciBmaWxlTmFtZSBpcyBudWxsIik7DQoJCQlp 
bnQgaW5kZXggPSBmaWxlTmFtZS5sYXN0SW5kZXhPZignLycpOw0KCQkJU3RyaW5nIG5hbWUgPSBudWxsOw0KCQkJaWYgKGluZGV4ID49IDApIG5hbWUgPSBmaWxlTmFtZS5zdWJzdHJpbmcoaW5kZXggKyAxKTsNCgkJCWVsc2UgbmFtZSA9IGZpbGVOYW1lOw0KCQkJaW5kZXggPSBuYW1lLmxhc3RJbmRleE9mKCdcXCcpOw0KCQkJaWYgKGluZGV4ID49IDApIGZpbGVOYW1lID0gbmFtZS5zdWJzdHJpbmcoaW5kZXggKyAxKTsNCgkJCXBhdGggPSBkaXIgKyBGaWxlLnNlcGFyYXRvciArIGZpbGVOYW1lOw0KCQkJaWYgKEZpbGUuc2VwYXJhdG9yQ2hhciA9PSAnLycpIHJldHVybiBwYXRoLnJlcGxhY2UoJ1xcJywgRmlsZS5zZXBhcmF0b3JDaGFyKTsNCgkJCWVsc2UgcmV0dXJuIHBhdGgucmVwbGFjZSgnLycsIEZpbGUuc2VwYXJhdG9yQ2hhcik7DQoJCX0NCgl9IA0KCWNsYXNzIEZpbGVDb21wIGltcGxlbWVudHMgQ29tcGFyYXRvciB7DQoJCWludCBtb2RlOw0KCQlpbnQgc2lnbjsNCgkJRmlsZUNvbXAoKSB7DQoJCQl0aGlzLm1vZGUgPSAxOw0KCQkJdGhpcy5zaWduID0gMTsNCgkJfQ0KCQlGaWxlQ29tcChpbnQgbW9kZSkgew0KCQkJaWYgKG1vZGUgPCAwKSB7DQoJCQkJdGhpcy5tb2RlID0gLW1vZGU7DQoJCQkJc2lnbiA9IC0xOw0KCQkJfQ0KCQkJZWxzZSB7DQoJCQkJdGhpcy5tb2RlID0gbW9kZTsNCgkJCQl0aGlzLnNpZ24gPSAxOw0KCQkJfQ0KCQl9DQoNCgkJcHVibGljIGludCBjb21wYXJlKE9iamVjdCBvMSwgT2JqZWN0IG8yKSB7DQoJCQlGaWxlIGYxID0gKEZpbGUpIG8xOw0KCQkJRmlsZSBmMiA9IChGaWxlKSBvMjsNCgkJCWlmIChmMS5pc0RpcmVjdG9yeSgpKSB7DQoJCQkJaWYgKGYyLmlzRGlyZWN0b3J5KCkpIHsNCgkJCQkJc3dpdGNoIChtb2RlKSB7DQoJCQkJCS8vRmlsZW5hbWUgb3IgVHlwZQ0KCQkJCQljYXNlIDE6DQoJCQkJCWNhc2UgNDoNCgkJCQkJCXJldHVybiBzaWduDQoJCQkJCQkJCSogZjEuZ2V0QWJzb2x1dGVQYXRoKCkudG9VcHBlckNhc2UoKS5jb21wYXJlVG8oDQoJCQkJCQkJCQkJZjIuZ2V0QWJzb2x1dGVQYXRoKCkudG9VcHBlckNhc2UoKSk7DQoJCQkJCS8vRmlsZXNpemUNCgkJCQkJY2FzZSAyOg0KCQkJCQkJcmV0dXJuIHNpZ24gKiAobmV3IExvbmcoZjEubGVuZ3RoKCkpLmNvbXBhcmVUbyhuZXcgTG9uZyhmMi5sZW5ndGgoKSkpKTsNCgkJCQkJLy9EYXRlDQoJCQkJCWNhc2UgMzoNCgkJCQkJCXJldHVybiBzaWduDQoJCQkJCQkJCSogKG5ldyBMb25nKGYxLmxhc3RNb2RpZmllZCgpKQ0KCQkJCQkJCQkJCS5jb21wYXJlVG8obmV3IExvbmcoZjIubGFzdE1vZGlmaWVkKCkpKSk7DQoJCQkJCWRlZmF1bHQ6DQoJCQkJCQlyZXR1cm4gMTsNCgkJCQkJfQ0KCQkJCX0NCgkJCQllbHNlIHJldHVybiAtMTsNCgkJCX0NCgkJCWVsc2UgaWYgKGYyLmlzRGlyZWN0b3J5KCkpIHJldHVybiAxOw0KCQkJZWxzZSB7DQoJCQkJc3dpdGNoIChtb2RlKSB7DQoJCQkJY2FzZSAxOg0KCQkJCQlyZXR1cm4gc2lnbg0KCQkJCQkJCSogZjEuZ2V0QWJzb2x1dGVQYXRoKCkudG9VcHBlckNhc2Uo 
KS5jb21wYXJlVG8oDQoJCQkJCQkJCQlmMi5nZXRBYnNvbHV0ZVBhdGgoKS50b1VwcGVyQ2FzZSgpKTsNCgkJCQljYXNlIDI6DQoJCQkJCXJldHVybiBzaWduICogKG5ldyBMb25nKGYxLmxlbmd0aCgpKS5jb21wYXJlVG8obmV3IExvbmcoZjIubGVuZ3RoKCkpKSk7DQoJCQkJY2FzZSAzOg0KCQkJCQlyZXR1cm4gc2lnbg0KCQkJCQkJCSogKG5ldyBMb25nKGYxLmxhc3RNb2RpZmllZCgpKS5jb21wYXJlVG8obmV3IExvbmcoZjIubGFzdE1vZGlmaWVkKCkpKSk7DQoJCQkJY2FzZSA0OiB7IC8vIFNvcnQgYnkgZXh0ZW5zaW9uDQoJCQkJCWludCB0ZW1wSW5kZXhmMSA9IGYxLmdldEFic29sdXRlUGF0aCgpLmxhc3RJbmRleE9mKCcuJyk7DQoJCQkJCWludCB0ZW1wSW5kZXhmMiA9IGYyLmdldEFic29sdXRlUGF0aCgpLmxhc3RJbmRleE9mKCcuJyk7DQoJCQkJCWlmICgodGVtcEluZGV4ZjEgPT0gLTEpICYmICh0ZW1wSW5kZXhmMiA9PSAtMSkpIHsgLy8gTmVpdGhlciBoYXZlIGFuIGV4dGVuc2lvbg0KCQkJCQkJcmV0dXJuIHNpZ24NCgkJCQkJCQkJKiBmMS5nZXRBYnNvbHV0ZVBhdGgoKS50b1VwcGVyQ2FzZSgpLmNvbXBhcmVUbygNCgkJCQkJCQkJCQlmMi5nZXRBYnNvbHV0ZVBhdGgoKS50b1VwcGVyQ2FzZSgpKTsNCgkJCQkJfQ0KCQkJCQkvLyBmMSBoYXMgbm8gZXh0ZW5zaW9uDQoJCQkJCWVsc2UgaWYgKHRlbXBJbmRleGYxID09IC0xKSByZXR1cm4gLXNpZ247DQoJCQkJCS8vIGYyIGhhcyBubyBleHRlbnNpb24NCgkJCQkJZWxzZSBpZiAodGVtcEluZGV4ZjIgPT0gLTEpIHJldHVybiBzaWduOw0KCQkJCQkvLyBCb3RoIGhhdmUgYW4gZXh0ZW5zaW9uDQoJCQkJCWVsc2Ugew0KCQkJCQkJU3RyaW5nIHRlbXBFbmRmMSA9IGYxLmdldEFic29sdXRlUGF0aCgpLnRvVXBwZXJDYXNlKCkNCgkJCQkJCQkJLnN1YnN0cmluZyh0ZW1wSW5kZXhmMSk7DQoJCQkJCQlTdHJpbmcgdGVtcEVuZGYyID0gZjIuZ2V0QWJzb2x1dGVQYXRoKCkudG9VcHBlckNhc2UoKQ0KCQkJCQkJCQkuc3Vic3RyaW5nKHRlbXBJbmRleGYyKTsNCgkJCQkJCXJldHVybiBzaWduICogdGVtcEVuZGYxLmNvbXBhcmVUbyh0ZW1wRW5kZjIpOw0KCQkJCQl9DQoJCQkJfQ0KCQkJCWRlZmF1bHQ6DQoJCQkJCXJldHVybiAxOw0KCQkJCX0NCgkJCX0NCgkJfQ0KCX0NCgljbGFzcyBXcml0ZXIyU3RyZWFtIGV4dGVuZHMgT3V0cHV0U3RyZWFtIHsNCg0KCQlXcml0ZXIgb3V0Ow0KDQoJCVdyaXRlcjJTdHJlYW0oV3JpdGVyIHcpIHsNCgkJCXN1cGVyKCk7DQoJCQlvdXQgPSB3Ow0KCQl9DQoNCgkJcHVibGljIHZvaWQgd3JpdGUoaW50IGkpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQoJCQlvdXQud3JpdGUoaSk7DQoJCX0NCg0KCQlwdWJsaWMgdm9pZCB3cml0ZShieXRlW10gYikgdGhyb3dzIElPRXhjZXB0aW9uIHsNCgkJCWZvciAoaW50IGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykgew0KCQkJCWludCBuID0gYltpXTsNCgkJCQkvL0NvbnZlcnQgYnl0ZSB0byB1Ynl0ZQ0KCQkJCW4gPSAoKG4gPj4+IDQpICYgMHhGKSAqIDE2ICsgKG4gJiAweEYpOw0K 
CQkJCW91dC53cml0ZShuKTsNCgkJCX0NCgkJfQ0KDQoJCXB1YmxpYyB2b2lkIHdyaXRlKGJ5dGVbXSBiLCBpbnQgb2ZmLCBpbnQgbGVuKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KCQkJZm9yIChpbnQgaSA9IG9mZjsgaSA8IG9mZiArIGxlbjsgaSsrKSB7DQoJCQkJaW50IG4gPSBiW2ldOw0KCQkJCW4gPSAoKG4gPj4+IDQpICYgMHhGKSAqIDE2ICsgKG4gJiAweEYpOw0KCQkJCW91dC53cml0ZShuKTsNCgkJCX0NCgkJfQ0KCX0gDQoJc3RhdGljIFZlY3RvciBleHBhbmRGaWxlTGlzdChTdHJpbmdbXSBmaWxlcywgYm9vbGVhbiBpbmNsRGlycykgew0KCQlWZWN0b3IgdiA9IG5ldyBWZWN0b3IoKTsNCgkJaWYgKGZpbGVzID09IG51bGwpIHJldHVybiB2Ow0KCQlmb3IgKGludCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKQ0KCQkJdi5hZGQobmV3IEZpbGUoVVJMRGVjb2Rlci5kZWNvZGUoZmlsZXNbaV0pKSk7DQoJCWZvciAoaW50IGkgPSAwOyBpIDwgdi5zaXplKCk7IGkrKykgew0KCQkJRmlsZSBmID0gKEZpbGUpIHYuZ2V0KGkpOw0KCQkJaWYgKGYuaXNEaXJlY3RvcnkoKSkgew0KCQkJCUZpbGVbXSBmcyA9IGYubGlzdEZpbGVzKCk7DQoJCQkJZm9yIChpbnQgbiA9IDA7IG4gPCBmcy5sZW5ndGg7IG4rKykNCgkJCQkJdi5hZGQoZnNbbl0pOw0KCQkJCWlmICghaW5jbERpcnMpIHsNCgkJCQkJdi5yZW1vdmUoaSk7DQoJCQkJCWktLTsNCgkJCQl9DQoJCQl9DQoJCX0NCgkJcmV0dXJuIHY7DQoJfQ0KCXN0YXRpYyBTdHJpbmcgZ2V0RGlyKFN0cmluZyBkaXIsIFN0cmluZyBuYW1lKSB7DQoJCWlmICghZGlyLmVuZHNXaXRoKEZpbGUuc2VwYXJhdG9yKSkgZGlyID0gZGlyICsgRmlsZS5zZXBhcmF0b3I7DQoJCUZpbGUgbXYgPSBuZXcgRmlsZShuYW1lKTsNCgkJU3RyaW5nIG5ld19kaXIgPSBudWxsOw0KCQlpZiAoIW12LmlzQWJzb2x1dGUoKSkgew0KCQkJbmV3X2RpciA9IGRpciArIG5hbWU7DQoJCX0NCgkJZWxzZSBuZXdfZGlyID0gbmFtZTsNCgkJcmV0dXJuIG5ld19kaXI7DQoJfQ0KCXN0YXRpYyBTdHJpbmcgY29udmVydEZpbGVTaXplKGxvbmcgc2l6ZSkgew0KCQlpbnQgZGl2aXNvciA9IDE7DQoJCVN0cmluZyB1bml0ID0gImJ5dGVzIjsNCgkJaWYgKHNpemUgPj0gMTAyNCAqIDEwMjQpIHsNCgkJCWRpdmlzb3IgPSAxMDI0ICogMTAyNDsNCgkJCXVuaXQgPSAiTUIiOw0KCQl9DQoJCWVsc2UgaWYgKHNpemUgPj0gMTAyNCkgew0KCQkJZGl2aXNvciA9IDEwMjQ7DQoJCQl1bml0ID0gIktCIjsNCgkJfQ0KCQlpZiAoZGl2aXNvciA9PSAxKSByZXR1cm4gc2l6ZSAvIGRpdmlzb3IgKyAiICIgKyB1bml0Ow0KCQlTdHJpbmcgYWZ0ZXJjb21tYSA9ICIiICsgMTAwICogKHNpemUgJSBkaXZpc29yKSAvIGRpdmlzb3I7DQoJCWlmIChhZnRlcmNvbW1hLmxlbmd0aCgpID09IDEpIGFmdGVyY29tbWEgPSAiMCIgKyBhZnRlcmNvbW1hOw0KCQlyZXR1cm4gc2l6ZSAvIGRpdmlzb3IgKyAiLiIgKyBhZnRlcmNvbW1hICsgIiAiICsgdW5pdDsNCgl9DQoJc3RhdGljIHZvaWQgY29weVN0cmVhbXMoSW5wdXRTdHJl 
YW0gaW4sIE91dHB1dFN0cmVhbSBvdXQsIGJ5dGVbXSBidWZmZXIpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQoJCWNvcHlTdHJlYW1zV2l0aG91dENsb3NlKGluLCBvdXQsIGJ1ZmZlcik7DQoJCWluLmNsb3NlKCk7DQoJCW91dC5jbG9zZSgpOw0KCX0NCglzdGF0aWMgdm9pZCBjb3B5U3RyZWFtc1dpdGhvdXRDbG9zZShJbnB1dFN0cmVhbSBpbiwgT3V0cHV0U3RyZWFtIG91dCwgYnl0ZVtdIGJ1ZmZlcikNCgkJCXRocm93cyBJT0V4Y2VwdGlvbiB7DQoJCWludCBiOw0KCQl3aGlsZSAoKGIgPSBpbi5yZWFkKGJ1ZmZlcikpICE9IC0xKQ0KCQkJb3V0LndyaXRlKGJ1ZmZlciwgMCwgYik7DQoJfQ0KCXN0YXRpYyBTdHJpbmcgZ2V0TWltZVR5cGUoU3RyaW5nIGZOYW1lKSB7DQoJCWZOYW1lID0gZk5hbWUudG9Mb3dlckNhc2UoKTsNCgkJaWYgKGZOYW1lLmVuZHNXaXRoKCIuanBnIikgfHwgZk5hbWUuZW5kc1dpdGgoIi5qcGVnIikgfHwgZk5hbWUuZW5kc1dpdGgoIi5qcGUiKSkgcmV0dXJuICJpbWFnZS9qcGVnIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5naWYiKSkgcmV0dXJuICJpbWFnZS9naWYiOw0KCQllbHNlIGlmIChmTmFtZS5lbmRzV2l0aCgiLnBkZiIpKSByZXR1cm4gImFwcGxpY2F0aW9uL3BkZiI7DQoJCWVsc2UgaWYgKGZOYW1lLmVuZHNXaXRoKCIuaHRtIikgfHwgZk5hbWUuZW5kc1dpdGgoIi5odG1sIikgfHwgZk5hbWUuZW5kc1dpdGgoIi5zaHRtbCIpKSByZXR1cm4gInRleHQvaHRtbCI7DQoJCWVsc2UgaWYgKGZOYW1lLmVuZHNXaXRoKCIuYXZpIikpIHJldHVybiAidmlkZW8veC1tc3ZpZGVvIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5tb3YiKSB8fCBmTmFtZS5lbmRzV2l0aCgiLnF0IikpIHJldHVybiAidmlkZW8vcXVpY2t0aW1lIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5tcGciKSB8fCBmTmFtZS5lbmRzV2l0aCgiLm1wZWciKSB8fCBmTmFtZS5lbmRzV2l0aCgiLm1wZSIpKSByZXR1cm4gInZpZGVvL21wZWciOw0KCQllbHNlIGlmIChmTmFtZS5lbmRzV2l0aCgiLnppcCIpKSByZXR1cm4gImFwcGxpY2F0aW9uL3ppcCI7DQoJCWVsc2UgaWYgKGZOYW1lLmVuZHNXaXRoKCIudGlmZiIpIHx8IGZOYW1lLmVuZHNXaXRoKCIudGlmIikpIHJldHVybiAiaW1hZ2UvdGlmZiI7DQoJCWVsc2UgaWYgKGZOYW1lLmVuZHNXaXRoKCIucnRmIikpIHJldHVybiAiYXBwbGljYXRpb24vcnRmIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5taWQiKSB8fCBmTmFtZS5lbmRzV2l0aCgiLm1pZGkiKSkgcmV0dXJuICJhdWRpby94LW1pZGkiOw0KCQllbHNlIGlmIChmTmFtZS5lbmRzV2l0aCgiLnhsIikgfHwgZk5hbWUuZW5kc1dpdGgoIi54bHMiKSB8fCBmTmFtZS5lbmRzV2l0aCgiLnhsdiIpDQoJCQkJfHwgZk5hbWUuZW5kc1dpdGgoIi54bGEiKSB8fCBmTmFtZS5lbmRzV2l0aCgiLnhsYiIpIHx8IGZOYW1lLmVuZHNXaXRoKCIueGx0IikNCgkJCQl8fCBmTmFtZS5lbmRzV2l0aCgiLnhsbSIpIHx8IGZOYW1lLmVuZHNXaXRoKCIueGxrIikpIHJldHVybiAiYXBw 
bGljYXRpb24vZXhjZWwiOw0KCQllbHNlIGlmIChmTmFtZS5lbmRzV2l0aCgiLmRvYyIpIHx8IGZOYW1lLmVuZHNXaXRoKCIuZG90IikpIHJldHVybiAiYXBwbGljYXRpb24vbXN3b3JkIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5wbmciKSkgcmV0dXJuICJpbWFnZS9wbmciOw0KCQllbHNlIGlmIChmTmFtZS5lbmRzV2l0aCgiLnhtbCIpKSByZXR1cm4gInRleHQveG1sIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5zdmciKSkgcmV0dXJuICJpbWFnZS9zdmcreG1sIjsNCgkJZWxzZSBpZiAoZk5hbWUuZW5kc1dpdGgoIi5tcDMiKSkgcmV0dXJuICJhdWRpby9tcDMiOw0KCQllbHNlIGlmIChmTmFtZS5lbmRzV2l0aCgiLm9nZyIpKSByZXR1cm4gImF1ZGlvL29nZyI7DQoJCWVsc2UgcmV0dXJuICJ0ZXh0L3BsYWluIjsNCgl9DQoJc3RhdGljIFN0cmluZyBjb252Mkh0bWwoaW50IGkpIHsNCgkJaWYgKGkgPT0gJyYnKSByZXR1cm4gIiZhbXA7IjsNCgkJZWxzZSBpZiAoaSA9PSAnPCcpIHJldHVybiAiJmx0OyI7DQoJCWVsc2UgaWYgKGkgPT0gJz4nKSByZXR1cm4gIiZndDsiOw0KCQllbHNlIGlmIChpID09ICciJykgcmV0dXJuICImcXVvdDsiOw0KCQllbHNlIHJldHVybiAiIiArIChjaGFyKSBpOw0KCX0NCglzdGF0aWMgU3RyaW5nIGNvbnYySHRtbChTdHJpbmcgc3QpIHsNCgkJU3RyaW5nQnVmZmVyIGJ1ZiA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJZm9yIChpbnQgaSA9IDA7IGkgPCBzdC5sZW5ndGgoKTsgaSsrKSB7DQoJCQlidWYuYXBwZW5kKGNvbnYySHRtbChzdC5jaGFyQXQoaSkpKTsNCgkJfQ0KCQlyZXR1cm4gYnVmLnRvU3RyaW5nKCk7DQoJfQ0KCXN0YXRpYyBTdHJpbmcgc3RhcnRQcm9jZXNzKFN0cmluZyBjb21tYW5kLCBTdHJpbmcgZGlyKSB0aHJvd3MgSU9FeGNlcHRpb24gDQoJew0KCQlTdHJpbmcgbXlvcz1TeXN0ZW0uZ2V0UHJvcGVydHkoIm9zLm5hbWUiKTsNCgkJU3RyaW5nQnVmZmVyIHJldCA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJU3RyaW5nW10gY29tbSA9IG5ldyBTdHJpbmdbM107DQoNCgkJaWYobXlvcy5zdGFydHNXaXRoKCJXaW5kb3dzIikpDQoJCXsNCgkgCWNvbW1bMF0gPSAiY21kIjsNCgkJY29tbVsxXSA9ICIvQyI7DQoJCX0NCgkJZWxzZQ0KCQl7DQoJIAljb21tWzBdID0gIi9iaW4vc2giOw0KCQljb21tWzFdID0gIi1jIjsNCgkJfQ0KCQljb21tWzJdID0gY29tbWFuZDsNCgkJbG9uZyBzdGFydCA9IFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpOw0KCQl0cnkgew0KCQkJLy9TdGFydCBwcm9jZXNzDQoJCQlQcm9jZXNzIGxzX3Byb2MgPSBSdW50aW1lLmdldFJ1bnRpbWUoKS5leGVjKGNvbW0sIG51bGwsIG5ldyBGaWxlKGRpcikpOw0KCQkJLy9HZXQgaW5wdXQgYW5kIGVycm9yIHN0cmVhbXMNCgkJCUJ1ZmZlcmVkSW5wdXRTdHJlYW0gbHNfaW4gPSBuZXcgQnVmZmVyZWRJbnB1dFN0cmVhbShsc19wcm9jLmdldElucHV0U3RyZWFtKCkpOw0KCQkJQnVmZmVyZWRJbnB1dFN0cmVhbSBsc19lcnIgPSBuZXcgQnVmZmVyZWRJbnB1dFN0cmVhbShs 
c19wcm9jLmdldEVycm9yU3RyZWFtKCkpOw0KCQkJYm9vbGVhbiBlbmQgPSBmYWxzZTsNCgkJCXdoaWxlICghZW5kKSB7DQoJCQkJaW50IGMgPSAwOw0KCQkJCXdoaWxlICgobHNfZXJyLmF2YWlsYWJsZSgpID4gMCkgJiYgKCsrYyA8PSAxMDAwKSkgew0KCQkJCQlyZXQuYXBwZW5kKGNvbnYySHRtbChsc19lcnIucmVhZCgpKSk7DQoJCQkJfQ0KCQkJCWMgPSAwOw0KCQkJCXdoaWxlICgobHNfaW4uYXZhaWxhYmxlKCkgPiAwKSAmJiAoKytjIDw9IDEwMDApKSB7DQoJCQkJCXJldC5hcHBlbmQoY29udjJIdG1sKGxzX2luLnJlYWQoKSkpOw0KCQkJCX0NCgkJCQl0cnkgew0KCQkJCQlsc19wcm9jLmV4aXRWYWx1ZSgpOw0KCQkJCQkvL2lmIHRoZSBwcm9jZXNzIGhhcyBub3QgZmluaXNoZWQsIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24NCgkJCQkJLy9lbHNlDQoJCQkJCXdoaWxlIChsc19lcnIuYXZhaWxhYmxlKCkgPiAwKQ0KCQkJCQkJcmV0LmFwcGVuZChjb252Mkh0bWwobHNfZXJyLnJlYWQoKSkpOw0KCQkJCQl3aGlsZSAobHNfaW4uYXZhaWxhYmxlKCkgPiAwKQ0KCQkJCQkJcmV0LmFwcGVuZChjb252Mkh0bWwobHNfaW4ucmVhZCgpKSk7DQoJCQkJCWVuZCA9IHRydWU7DQoJCQkJfQ0KCQkJCWNhdGNoIChJbGxlZ2FsVGhyZWFkU3RhdGVFeGNlcHRpb24gZXgpIHsNCgkJCQkJLy9Qcm9jZXNzIGlzIHJ1bm5pbmcNCgkJCQl9DQoJCQkJLy9UaGUgcHJvY2VzcyBpcyBub3QgYWxsb3dlZCB0byBydW4gbG9uZ2VyIHRoYW4gZ2l2ZW4gdGltZS4NCgkJCQlpZiAoU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgLSBzdGFydCA+IE1BWF9QUk9DRVNTX1JVTk5JTkdfVElNRSkgew0KCQkJCQlsc19wcm9jLmRlc3Ryb3koKTsNCgkJCQkJZW5kID0gdHJ1ZTsNCgkJCQkJcmV0LmFwcGVuZCgiISEhISBQcm9jZXNzIGhhcyB0aW1lZCBvdXQsIGRlc3Ryb3llZCAhISEhISIpOw0KCQkJCX0NCgkJCQl0cnkgew0KCQkJCQlUaHJlYWQuc2xlZXAoNTApOw0KCQkJCX0NCgkJCQljYXRjaCAoSW50ZXJydXB0ZWRFeGNlcHRpb24gaWUpIHt9DQoJCQl9DQoJCX0NCgkJY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCgkJCXJldC5hcHBlbmQoIkVycm9yOiAiICsgZSk7DQoJCX0NCgkJcmV0dXJuIHJldC50b1N0cmluZygpOw0KCX0NCglzdGF0aWMgU3RyaW5nIGRpcjJsaW5rZGlyKFN0cmluZyBkaXIsIFN0cmluZyBicm93c2VyTGluaywgaW50IHNvcnRNb2RlKSB7DQoJCUZpbGUgZiA9IG5ldyBGaWxlKGRpcik7DQoJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcgU3RyaW5nQnVmZmVyKCk7DQoJCXdoaWxlIChmLmdldFBhcmVudEZpbGUoKSAhPSBudWxsKSB7DQoJCQlpZiAoZi5jYW5SZWFkKCkpIHsNCgkJCQlTdHJpbmcgZW5jUGF0aCA9IFVSTEVuY29kZXIuZW5jb2RlKGYuZ2V0QWJzb2x1dGVQYXRoKCkpOw0KCQkJCWJ1Zi5pbnNlcnQoMCwgIjxhIGhyZWY9XCIiICsgYnJvd3NlckxpbmsgKyAiP3NvcnQ9IiArIHNvcnRNb2RlICsgIiZhbXA7ZGlyPSINCgkJCQkJCSsgZW5jUGF0aCArICJcIj4iICsgY29udjJIdG1sKGYuZ2V0TmFtZSgpKSAr 
IEZpbGUuc2VwYXJhdG9yICsgIjwvYT4iKTsNCgkJCX0NCgkJCWVsc2UgYnVmLmluc2VydCgwLCBjb252Mkh0bWwoZi5nZXROYW1lKCkpICsgRmlsZS5zZXBhcmF0b3IpOw0KCQkJZiA9IGYuZ2V0UGFyZW50RmlsZSgpOw0KCQl9DQoJCWlmIChmLmNhblJlYWQoKSkgew0KCQkJU3RyaW5nIGVuY1BhdGggPSBVUkxFbmNvZGVyLmVuY29kZShmLmdldEFic29sdXRlUGF0aCgpKTsNCgkJCWJ1Zi5pbnNlcnQoMCwgIjxhIGhyZWY9XCIiICsgYnJvd3NlckxpbmsgKyAiP3NvcnQ9IiArIHNvcnRNb2RlICsgIiZhbXA7ZGlyPSIgKyBlbmNQYXRoDQoJCQkJCSsgIlwiPiIgKyBjb252Mkh0bWwoZi5nZXRBYnNvbHV0ZVBhdGgoKSkgKyAiPC9hPiIpOw0KCQl9DQoJCWVsc2UgYnVmLmluc2VydCgwLCBmLmdldEFic29sdXRlUGF0aCgpKTsNCgkJcmV0dXJuIGJ1Zi50b1N0cmluZygpOw0KCX0NCg0KCXN0YXRpYyBTdHJpbmcgZGlyMmxpbmtCcmVhZGNydW1icyhTdHJpbmcgZGlyLCBTdHJpbmcgYnJvd3NlckxpbmssIGludCBzb3J0TW9kZSkgew0KCQlGaWxlIGYgPSBuZXcgRmlsZShkaXIpOw0KCQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigpOw0KCQl3aGlsZSAoZi5nZXRQYXJlbnRGaWxlKCkgIT0gbnVsbCkgew0KCQkJaWYgKGYuY2FuUmVhZCgpKSB7DQoJCQkJU3RyaW5nIGVuY1BhdGggPSBVUkxFbmNvZGVyLmVuY29kZShmLmdldEFic29sdXRlUGF0aCgpKTsNCgkJCQlidWYuaW5zZXJ0KDAsICI8bGk+PGEgaHJlZj1cIiIgKyBicm93c2VyTGluayArICI/c29ydD0iICsgc29ydE1vZGUgKyAiJmFtcDtkaXI9Ig0KCQkJCQkJKyBlbmNQYXRoICsgIlwiPiIgKyBjb252Mkh0bWwoZi5nZXROYW1lKCkpICsgIjwvYT48L2xpPiIpOw0KCQkJfQ0KCQkJZWxzZSBidWYuaW5zZXJ0KDAsIGNvbnYySHRtbChmLmdldE5hbWUoKSkgKyBGaWxlLnNlcGFyYXRvcik7DQoJCQlmID0gZi5nZXRQYXJlbnRGaWxlKCk7DQoJCX0NCgkJaWYgKGYuY2FuUmVhZCgpKSB7DQoJCQlTdHJpbmcgZW5jUGF0aCA9IFVSTEVuY29kZXIuZW5jb2RlKGYuZ2V0QWJzb2x1dGVQYXRoKCkpOw0KCQkJYnVmLmluc2VydCgwLCAiPGxpPjxhIGhyZWY9XCIiICsgYnJvd3NlckxpbmsgKyAiP3NvcnQ9IiArIHNvcnRNb2RlICsgIiZhbXA7ZGlyPSIgKyBlbmNQYXRoDQoJCQkJCSsgIlwiPiIgKyBjb252Mkh0bWwoZi5nZXRBYnNvbHV0ZVBhdGgoKSkgKyAiPC9hPjwvbGk+Iik7DQoJCX0NCgkJZWxzZSBidWYuaW5zZXJ0KDAsIGYuZ2V0QWJzb2x1dGVQYXRoKCkpOw0KCQlyZXR1cm4gYnVmLnRvU3RyaW5nKCk7DQoJfQ0KDQoJc3RhdGljIGJvb2xlYW4gaXNQYWNrZWQoU3RyaW5nIG5hbWUsIGJvb2xlYW4gZ3opIHsNCgkJcmV0dXJuIChuYW1lLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoIi56aXAiKSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoIi5qYXIiKQ0KCQkJCXx8IChneiAmJiBuYW1lLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoIi5neiIpKSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkNCgkJCQkuZW5kc1dpdGgoIi53YXIiKSk7DQoJ 
fQ0KCXN0YXRpYyBib29sZWFuIGlzQWxsb3dlZChGaWxlIHBhdGgsIGJvb2xlYW4gd3JpdGUpIHRocm93cyBJT0V4Y2VwdGlvbnsNCgkJaWYgKFJFQURfT05MWSAmJiB3cml0ZSkgcmV0dXJuIGZhbHNlOw0KCQlpZiAoUkVTVFJJQ1RfQlJPV1NJTkcpIHsNCiAgICAgICAgICAgIFN0cmluZ1Rva2VuaXplciBzdGsgPSBuZXcgU3RyaW5nVG9rZW5pemVyKFJFU1RSSUNUX1BBVEgsICI7Iik7DQogICAgICAgICAgICB3aGlsZSAoc3RrLmhhc01vcmVUb2tlbnMoKSl7DQoJCQkgICAgaWYgKHBhdGghPW51bGwgJiYgcGF0aC5nZXRDYW5vbmljYWxQYXRoKCkuc3RhcnRzV2l0aChzdGsubmV4dFRva2VuKCkpKQ0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gUkVTVFJJQ1RfV0hJVEVMSVNUOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgcmV0dXJuICFSRVNUUklDVF9XSElURUxJU1Q7DQoJCX0NCgkJZWxzZSByZXR1cm4gdHJ1ZTsNCgl9DQoJLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCgklPg0KPCUNCmlmIChyZXF1ZXN0LmdldFBhcmFtZXRlcigicGFzc3dvcmQiKSA9PSBudWxsICYmIHNlc3Npb24uZ2V0QXR0cmlidXRlKCJwYXNzd29yZCIpID09IG51bGwpIA0Kew0KLy8gc2hvdyB0aGUgbG9naW4gZm9ybSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiU+DQo8aHRtbD4NCjxoZWFkPg0KPHRpdGxlPlp1YmluIC0gTG9naW48L3RpdGxlPg0KPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9Z2IyMzEyIj48L2hlYWQ+DQo8c3R5bGU+DQoNCmJvZHkgew0KCWZvbnQtc2l6ZTogMTRweDsNCglmb250LWZhbWlseTogIkFyaWFsIjsNCgliYWNrZ3JvdW5kLWNvbG9yOiAjNjY2Ow0KCWNvbG9yOiAjZmZmZmZmOw0KfQ0KdGQgew0KCWZvbnQtc2l6ZTogMTRweDsNCglmb250LWZhbWlseTogIkFyaWFsIjsNCn0NCg0KaW5wdXQudGV4dGJveCB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsNCiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIGJveC1zaGFkb3c6IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSBpbnNldDsNCiAgICBjb2xvcjogIzU1NTsNCiAgICBkaXNwbGF5OiBibG9jazsNCiAgICBmb250LXNpemU6IDE0cHg7DQogICAgaGVpZ2h0OiAzNHB4Ow0KICAgIGxpbmUtaGVpZ2h0OiAxLjQyODU3Ow0KICAgIHBhZGRpbmc6IDZweCAxMnB4Ow0KICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCAwcywgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dCAwczsNCiAgICB3aWR0aDogMTAwJTsNCn0NCg0KaW5wdXQu 
YnV0dG9uIHsNCglmb250LWZhbWlseTogIkFyaWFsIjsNCiAgICAtbW96LXVzZXItc2VsZWN0OiBub25lOw0KICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7DQogICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIGN1cnNvcjogcG9pbnRlcjsNCiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7DQogICAgZm9udC1zaXplOiAxNHB4Ow0KICAgIGZvbnQtd2VpZ2h0OiA0MDA7DQogICAgbGluZS1oZWlnaHQ6IDEuNDI4NTc7DQogICAgbWFyZ2luLWJvdHRvbTogMDsNCiAgICBwYWRkaW5nOiA2cHggMTJweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsNCiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICM1YmMwZGU7DQogICAgYm9yZGVyLWNvbG9yOiAjNDZiOGRhOw0KICAgIGNvbG9yOiAjZmZmOw0KfQ0KDQp0ZC5kYXRhcm93cyB7DQoJZm9udC1zaXplOiAxNHB4Ow0KCWZvbnQtZmFtaWx5OiAiQXJpYWwiOw0KCWhlaWdodDogMjVweDsNCn0NCg0KdGV4dGFyZWEgew0KCWJvcmRlcjogMXB4IHNvbGlkICMwMEJGRkY7DQp9DQouaW5wdXRMb2dpbiB7Zm9udC1zaXplOiA5cHQ7CWJvcmRlcjogMXB4IHNvbGlkICMwMEJGRkY7YmFja2dyb3VuZC1jb2xvcjogIzAwMDtjb2xvcjogI2ZmZjt9DQoudGFibGUxIHtib3JkZXI6IDFweCBzb2xpZCAjMDBCRkZGO30NCi50ZDIge0JBQ0tHUk9VTkQtQ09MT1I6IzY2NjsgaGVpZ2h0OjMzcHg7fQ0KPC9zdHlsZT4NCjxzY3JpcHQgbGFuZ3VhZ2U9IkphdmFTY3JpcHQiPg0KPCEtLQ0KZnVuY3Rpb24gbHRyaW0oc3RyKSB7DQoJd2hpbGUgKHN0ci5pbmRleE9mKDApID09ICIgIikNCgkJc3RyID0gc3RyLnN1YnN0cmluZygxKTsNCgkJDQoJcmV0dXJuIHN0cjsNCn0NCg0KZnVuY3Rpb24gY2hhbmdlQWN0aW9uKG9iaikgew0KCW9iai5zdWJtaXQoKTsNCn0NCi8vLS0+DQo8L3NjcmlwdD4NCjxib2R5Pg0KPGRpdiBhbGlnbj0iY2VudGVyIiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTt2aXNpYmlsaXR5OnNob3c7IHotaW5kZXg6MDtsZWZ0OjE0cHg7dG9wOjIwMHB4Ij4NCiAgPFRBQkxFIGNsYXNzPSJ0YWJsZTEiIGNlbGxTcGFjaW5nPSIxIiBjZWxsUGFkZGluZz0iMSIgd2lkdGg9IjQ3MyIgYm9yZGVyPSIwIiBhbGlnbj0iY2VudGVyIj4NCiAgICA8dHI+DQogICAgICA8dGQgY2xhc3M9InRyMSI+DQogICAgICAgIDxUQUJMRSBjZWxsU3BhY2luZz0iMCIgY2VsbFBhZGRpbmc9IjAiIHdpZHRoPSI0NjgiIGJvcmRlcj0iMCI+DQogICAgICAgICAgPHRyPg0KICAgICAgICAgICAgPFREIGFsaWduPSJjZW50ZXIiIGNsYXNzPSJ0ZDIiIGNvbHNwYW49IjIiPjxGT05UIGNvbG9yPSIjZmZmZmZmIj48Yj5Qcm90ZWN0ZWQgRG9jdW1lbnQ8Yj48L2I+PC9GT05UPjwvVEQ+DQogICAgICAgICAgPC90cj4NCiAgICAgICAgICAgIDxmb3JtIG5hbWU9ImYxIiBtZXRob2Q9InBvc3QiPg0KICAgICAgICAgICAgPHNjcmlwdCBs 
YW5ndWFnZT0iamF2YXNjcmlwdCIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NCjwhLS0NCglmdW5jdGlvbiBfX2RvUG9zdEJhY2soZXZlbnRUYXJnZXQsIGV2ZW50QXJndW1lbnQpIHsNCgkJdmFyIHRoZWZvcm07DQoJCWlmICh3aW5kb3cubmF2aWdhdG9yLmFwcE5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCJtaWNyb3NvZnQiKSA+IC0xKSB7DQoJCQl0aGVmb3JtID0gZG9jdW1lbnQuRm9ybTE7DQoJCX0NCgkJZWxzZSB7DQoJCQl0aGVmb3JtID0gZG9jdW1lbnQuZm9ybXNbIkZvcm0xIl07DQoJCX0NCgkJdGhlZm9ybS5fX0VWRU5UVEFSR0VULnZhbHVlID0gZXZlbnRUYXJnZXQuc3BsaXQoIiQiKS5qb2luKCI6Iik7DQoJCXRoZWZvcm0uX19FVkVOVEFSR1VNRU5ULnZhbHVlID0gZXZlbnRBcmd1bWVudDsNCgkJdGhlZm9ybS5zdWJtaXQoKTsNCgl9DQovLyAtLT4NCjwvc2NyaXB0Pg0KICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICA8dGQgaGVpZ2h0PSIzMCIgYWxpZ249ImNlbnRlciIgY2xhc3M9InRkMiIgY29sc3Bhbj0iMiI+DQogICAgICAgICAgICAgICAgRW50ZXIgUGFzc3dvcmQ6Jm5ic3A7PGlucHV0IG5hbWU9InBhc3N3b3JkIiB0eXBlPSJwYXNzd29yZCIgY2xhc3M9InRleHRib3giIGlkPSJUZXh0Ym94IiAvPg0KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIG5hbWU9IkJ1dHRvbiIgdmFsdWU9IkxvZ2luIiBpZD0iQnV0dG9uIiB0aXRsZT0iQ2xpY2sgaGVyZSB0byBsb2dpbiIgY2xhc3M9ImJ1dHRvbiIgLz4NCiAgICAgICAgICAgICAgPC90ZD4NCiAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgPC9mb3JtPg0KICAgICAgPC9UQUJMRT48L3RkPg0KICAgIDwvdHI+DQogIDwvVEFCTEU+DQo8L2Rpdj4NCjwlDQovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLy8gZW5kIG9mIHRoZSBsb2dpbiBmb3JtDQpvdXQuY2xvc2UoKTsNCn0gDQplbHNlDQp7DQoJU3RyaW5nIHBhc3N3b3JkID0gbnVsbDsNCgkNCglpZiAoc2Vzc2lvbi5nZXRBdHRyaWJ1dGUoInBhc3N3b3JkIikgPT0gbnVsbCkgew0KCQlwYXNzd29yZCA9IChTdHJpbmcpcmVxdWVzdC5nZXRQYXJhbWV0ZXIoInBhc3N3b3JkIik7DQoJCQ0KCQlpZiAodmFsaWRhdGUocGFzc3dvcmQpID09IGZhbHNlKSB7DQoJCQlvdXQucHJpbnRsbigiPGRpdiBhbGlnbj0nY2VudGVyJz48bGkgc3R5bGU9J2NvbG9yOiAjRkY2MzQ3Jz5QYXNzd29yZCBpcyB3cm9uZywgVHJ5IGFnYWluITwvbGk+PC9kaXY+Iik7DQoJCQlvdXQuY2xvc2UoKTsNCgkJCXJldHVybjsNCgkJfQ0KCQkNCgkJc2Vzc2lvbi5zZXRBdHRyaWJ1dGUoInBhc3N3b3JkIiwgcGFzc3dvcmQpOw0KCX0gZWxzZSB7DQoJCXBhc3N3b3JkID0gKFN0cmluZylzZXNzaW9uLmdldEF0dHJpYnV0ZSgicGFzc3dvcmQiKTsNCgl9DQoJU3RyaW5nIGFjdGlvbiA9IG51bGw7DQoJaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJteWFjdGlv 
biIpID09IG51bGwpDQoJCWFjdGlvbiA9ICJtYWluIjsNCgllbHNlIA0KCQlhY3Rpb24gPSAoU3RyaW5nKXJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJteWFjdGlvbiIpOw0KCQkNCglpZiAoYWN0aW9uLmVxdWFscygiZXhpdCIpKSANCgl7DQoJCXNlc3Npb24ucmVtb3ZlQXR0cmlidXRlKCJwYXNzd29yZCIpOw0KCQlyZXNwb25zZS5zZW5kUmVkaXJlY3QocmVxdWVzdC5nZXRSZXF1ZXN0VVJJKCkpOw0KCQlvdXQuY2xvc2UoKTsNCgkJcmV0dXJuOw0KCX0NCn0NCg0KDQoJCS8vR2V0IHRoZSBjdXJyZW50IGJyb3dzaW5nIGRpcmVjdG9yeQ0KCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZGlyIiwgcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImRpciIpKTsNCgkJZmluYWwgU3RyaW5nIGJyb3dzZXJfbmFtZSA9IHJlcXVlc3QuZ2V0UmVxdWVzdFVSSSgpOw0KCQlmaW5hbCBTdHJpbmcgRk9MX0lNRyA9ICIiOw0KCQlib29sZWFuIG5vaHRtbCA9IGZhbHNlOw0KCQlib29sZWFuIGRpcl92aWV3ID0gdHJ1ZTsNCgkJLy9HZXQgSmF2YXNjcmlwdA0KCQlpZiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIkphdmFzY3JpcHQiKSAhPSBudWxsKSB7DQoJCQlkaXJfdmlldyA9IGZhbHNlOw0KCQkJbm9odG1sID0gdHJ1ZTsNCgkJCS8vVGVsbCB0aGUgYnJvd3NlciB0aGF0IGl0IHNob3VsZCBjYWNoZSB0aGUgamF2YXNjcmlwdA0KCQkJcmVzcG9uc2Uuc2V0SGVhZGVyKCJDYWNoZS1Db250cm9sIiwgInB1YmxpYyIpOw0KCQkJRGF0ZSBub3cgPSBuZXcgRGF0ZSgpOw0KCQkJU2ltcGxlRGF0ZUZvcm1hdCBzZGYgPSBuZXcgU2ltcGxlRGF0ZUZvcm1hdCgiRUVFLCBkIE1NTSB5eXl5IEhIOm1tOnNzIHoiLCBMb2NhbGUuVVMpOw0KCQkJcmVzcG9uc2Uuc2V0SGVhZGVyKCJFeHBpcmVzIiwgc2RmLmZvcm1hdChuZXcgRGF0ZShub3cuZ2V0VGltZSgpICsgMTAwMCAqIDYwICogNjAgKiAyNCoyKSkpOw0KCQkJcmVzcG9uc2Uuc2V0SGVhZGVyKCJDb250ZW50LVR5cGUiLCAidGV4dC9qYXZhc2NyaXB0Iik7DQoJCQklPg0KCQkJPCUvLyBUaGlzIHNlY3Rpb24gY29udGFpbnMgdGhlIEphdmFzY3JpcHQgdXNlZCBmb3IgaW50ZXJmYWNlIGVsZW1lbnRzICU+DQoJCQl2YXIgY2hlY2sgPSBmYWxzZTsNCgkJCTwlLy8gRGlzYWJsZXMgdGhlIGNoZWNrYm94IGZlYXR1cmUgJT4NCgkJCWZ1bmN0aW9uIGRpcygpe2NoZWNrID0gdHJ1ZTt9DQoNCgkJCXZhciBET00gPSAwLCBNUyA9IDAsIE9QID0gMCwgYiA9IDA7DQoJCQk8JS8vIERldGVybWluZSB0aGUgYnJvd3NlciB0eXBlICU+DQoJCQlmdW5jdGlvbiBDaGVja0Jyb3dzZXIoKXsNCgkJCQlpZiAoYiA9PSAwKXsNCgkJCQkJaWYgKHdpbmRvdy5vcGVyYSkgT1AgPSAxOw0KCQkJCQkvLyBNb3ogb3IgTmV0c2NhcGUNCgkJCQkJaWYoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQpIERPTSA9IDE7DQoJCQkJCS8vIE1pY3JvJG9mdA0KCQkJCQlpZihkb2N1bWVudC5hbGwgJiYgIU9QKSBNUyA9IDE7DQoJCQkJCWIgPSAxOw0KCQkJCX0NCgkJCX0NCgkJCTwlLy8gQWxsb3dzIHRoZSB3aG9sZSByb3cgdG8gYmUgc2VsZWN0 
ZWQgJT4NCgkJCWZ1bmN0aW9uIHNlbHJvdyAoZWxlbWVudCwgaSl7DQoJCQkJdmFyIGVyc3Q7DQoJCQkJQ2hlY2tCcm93c2VyKCk7DQoJCQkJaWYgKChPUD09MSl8fChNUz09MSkpIGVyc3QgPSBlbGVtZW50LmZpcnN0Q2hpbGQuZmlyc3RDaGlsZDsNCgkJCQllbHNlIGlmIChET009PTEpIGVyc3QgPSBlbGVtZW50LmZpcnN0Q2hpbGQubmV4dFNpYmxpbmcuZmlyc3RDaGlsZDsNCgkJCQk8JS8vIE1vdXNlSW4gJT4NCgkJCQlpZiAoaT09MCl7DQoJCQkJCWlmIChlcnN0LmNoZWNrZWQgPT0gdHJ1ZSkgZWxlbWVudC5jbGFzc05hbWU9J21vdXNlY2hlY2tlZCc7DQoJCQkJCWVsc2UgZWxlbWVudC5jbGFzc05hbWU9J21vdXNlaW4nOw0KCQkJCX0NCgkJCQk8JS8vIE1vdXNlT3V0ICU+DQoJCQkJZWxzZSBpZiAoaT09MSl7DQoJCQkJCWlmIChlcnN0LmNoZWNrZWQgPT0gdHJ1ZSkgZWxlbWVudC5jbGFzc05hbWU9J2NoZWNrZWQnOw0KCQkJCQllbHNlIGVsZW1lbnQuY2xhc3NOYW1lPSdtb3VzZW91dCc7DQoJCQkJfQ0KCQkJCTwlICAgIC8vIE1vdXNlQ2xpY2sgJT4NCgkJCQllbHNlIGlmICgoaT09MikmJighY2hlY2spKXsNCgkJCQkJaWYgKGVyc3QuY2hlY2tlZD09dHJ1ZSkgZWxlbWVudC5jbGFzc05hbWU9J21vdXNlaW4nOw0KCQkJCQllbHNlIGVsZW1lbnQuY2xhc3NOYW1lPSdtb3VzZWNoZWNrZWQnOw0KCQkJCQllcnN0LmNsaWNrKCk7DQoJCQkJfQ0KCQkJCWVsc2UgY2hlY2s9ZmFsc2U7DQoJCQl9DQoJCQk8JS8vIEZpbHRlciBmaWxlcyBhbmQgZGlycyBpbiBGaWxlTGlzdCU+DQoJCQlmdW5jdGlvbiBmaWx0ZXIgKGJlZ3JpZmYpew0KCQkJCXZhciBzdWNoZSA9IGJlZ3JpZmYudmFsdWUudG9Mb3dlckNhc2UoKTsNCgkJCQl2YXIgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiZmlsZXRhYmxlIik7DQoJCQkJdmFyIGVsZTsNCgkJCQlmb3IgKHZhciByID0gMTsgciA8IHRhYmxlLnJvd3MubGVuZ3RoOyByKyspew0KCQkJCQllbGUgPSB0YWJsZS5yb3dzW3JdLmNlbGxzWzFdLmlubmVySFRNTC5yZXBsYWNlKC88W14+XSs+L2csIiIpOw0KCQkJCQlpZiAoZWxlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzdWNoZSk+PTAgKQ0KCQkJCQkJdGFibGUucm93c1tyXS5zdHlsZS5kaXNwbGF5ID0gJyc7DQoJCQkJCWVsc2UgdGFibGUucm93c1tyXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOw0KCQkgICAgICAJfQ0KCQkJfQ0KCQkJPCUvLyhEZSlzZWxlY3QgYWxsIGNoZWNrYm94ZXMlPgkNCgkJCWZ1bmN0aW9uIEFsbEZpbGVzKCl7DQoJCQkJZm9yKHZhciB4PTA7eCA8IGRvY3VtZW50LkZpbGVMaXN0LmVsZW1lbnRzLmxlbmd0aDt4Kyspew0KCQkJCQl2YXIgeSA9IGRvY3VtZW50LkZpbGVMaXN0LmVsZW1lbnRzW3hdOw0KCQkJCQl2YXIgeXRyID0geS5wYXJlbnROb2RlLnBhcmVudE5vZGU7DQoJCQkJCXZhciBjaGVjayA9IGRvY3VtZW50LkZpbGVMaXN0LnNlbGFsbC5jaGVja2VkOw0KCQkJCQlpZih5Lm5hbWUgPT0gJ3NlbGZpbGUnICYmIHl0ci5zdHlsZS5kaXNwbGF5ICE9ICdub25lJyl7DQoJCQkJCQlpZiAo 
eS5kaXNhYmxlZCAhPSB0cnVlKXsNCgkJCQkJCQl5LmNoZWNrZWQgPSBjaGVjazsNCgkJCQkJCQlpZiAoeS5jaGVja2VkID09IHRydWUpIHl0ci5jbGFzc05hbWUgPSAnY2hlY2tlZCc7DQoJCQkJCQkJZWxzZSB5dHIuY2xhc3NOYW1lID0gJ21vdXNlb3V0JzsNCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCX0NCgkJCX0NCgkJCQ0KCQkJZnVuY3Rpb24gc2hvcnRLZXlIYW5kbGVyKF9ldmVudCl7DQoJCQkJaWYgKCFfZXZlbnQpIF9ldmVudCA9IHdpbmRvdy5ldmVudDsNCgkJCQlpZiAoX2V2ZW50LndoaWNoKSB7DQoJCQkJCWtleWNvZGUgPSBfZXZlbnQud2hpY2g7DQoJCQkJfSBlbHNlIGlmIChfZXZlbnQua2V5Q29kZSkgew0KCQkJCQlrZXljb2RlID0gX2V2ZW50LmtleUNvZGU7DQoJCQkJfQ0KCQkJCXZhciB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRleHRfRGlyIik7DQoJCQkJLy96DQoJCQkJaWYgKGtleWNvZGUgPT0gMTIyKXsNCgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJ1dF9aaXAiKS5jbGljaygpOw0KCQkJCX0NCgkJCQkvL3IsIEYyDQoJCQkJZWxzZSBpZiAoa2V5Y29kZSA9PSAxMTMgfHwga2V5Y29kZSA9PSAxMTQpew0KCQkJCQl2YXIgcGF0aCA9IHByb21wdCgiUGxlYXNlIGVudGVyIG5ldyBmaWxlbmFtZSIsICIiKTsNCgkJCQkJaWYgKHBhdGggPT0gbnVsbCkgcmV0dXJuOw0KCQkJCQl0LnZhbHVlID0gcGF0aDsNCgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJ1dF9SZW4iKS5jbGljaygpOw0KCQkJCX0NCgkJCQkvL2MNCgkJCQllbHNlIGlmIChrZXljb2RlID09IDk5KXsNCgkJCQkJdmFyIHBhdGggPSBwcm9tcHQoIlBsZWFzZSBlbnRlciBmaWxlbmFtZSIsICIiKTsNCgkJCQkJaWYgKHBhdGggPT0gbnVsbCkgcmV0dXJuOw0KCQkJCQl0LnZhbHVlID0gcGF0aDsNCgkJCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJ1dF9ORmkiKS5jbGljaygpOw0KCQkJCX0NCgkJCQkvL2QNCgkJCQllbHNlIGlmIChrZXljb2RlID09IDEwMCl7DQoJCQkJCXZhciBwYXRoID0gcHJvbXB0KCJQbGVhc2UgZW50ZXIgZGlyZWN0b3J5IG5hbWUiLCAiIik7DQoJCQkJCWlmIChwYXRoID09IG51bGwpIHJldHVybjsNCgkJCQkJdC52YWx1ZSA9IHBhdGg7DQoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJidXRfTkRpIikuY2xpY2soKTsNCgkJCQl9DQoJCQkJLy9tDQoJCQkJZWxzZSBpZiAoa2V5Y29kZSA9PSAxMDkpew0KCQkJCQl2YXIgcGF0aCA9IHByb21wdCgiUGxlYXNlIGVudGVyIG1vdmUgZGVzdGluYXRpb24iLCAiIik7DQoJCQkJCWlmIChwYXRoID09IG51bGwpIHJldHVybjsNCgkJCQkJdC52YWx1ZSA9IHBhdGg7DQoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJidXRfTW92IikuY2xpY2soKTsNCgkJCQl9DQoJCQkJLy95DQoJCQkJZWxzZSBpZiAoa2V5Y29kZSA9PSAxMjEpew0KCQkJCQl2YXIgcGF0aCA9IHByb21wdCgiUGxlYXNlIGVudGVyIGNvcHkgZGVzdGluYXRpb24iLCAiIik7DQoJCQkJCWlmIChwYXRoID09IG51bGwpIHJldHVybjsNCgkJCQkJdC52YWx1 
ZSA9IHBhdGg7DQoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJidXRfQ29wIikuY2xpY2soKTsNCgkJCQl9DQoJCQkJLy9sDQoJCQkJZWxzZSBpZiAoa2V5Y29kZSA9PSAxMDgpew0KCQkJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYnV0X0xhdSIpLmNsaWNrKCk7DQoJCQkJfQ0KCQkJCS8vRGVsDQoJCQkJZWxzZSBpZiAoa2V5Y29kZSA9PSA0Nil7DQoJCQkJCWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJidXRfRGVsIikuY2xpY2soKTsNCgkJCQl9DQoJCQl9DQoNCgkJCWZ1bmN0aW9uIHBvcFVwKFVSTCl7DQoJCQkJZm5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgibXlGaWxlIilbMF0udmFsdWU7DQoJCQkJaWYgKGZuYW1lICE9ICIiKQ0KCQkJCQl3aW5kb3cub3BlbihVUkwrIj9maXJzdCZ1cGxNb25pdG9yPSIrZW5jb2RlVVJJQ29tcG9uZW50KGZuYW1lKSwiIiwid2lkdGg9NDAwLGhlaWdodD0xNTAscmVzaXphYmxlPXllcyxkZXBlbmQ9eWVzIikNCgkJCX0NCgkJCQ0KCQkJZG9jdW1lbnQub25rZXlwcmVzcyA9IHNob3J0S2V5SGFuZGxlcjsNCjwlIAkJfQ0KCQkvLyBWaWV3IGZpbGUNCgkJZWxzZSBpZiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoImZpbGUiKSAhPSBudWxsKSB7DQogICAgICAgICAgICBGaWxlIGYgPSBuZXcgRmlsZShyZXF1ZXN0LmdldFBhcmFtZXRlcigiZmlsZSIpKTsNCiAgICAgICAgICAgIGlmICghaXNBbGxvd2VkKGYsIGZhbHNlKSkgew0KICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJkaXIiLCBmLmdldFBhcmVudCgpKTsNCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIitmLmdldEFic29sdXRlUGF0aCgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2UgaWYgKGYuZXhpc3RzKCkgJiYgZi5jYW5SZWFkKCkpIHsNCiAgICAgICAgICAgICAgICBpZiAoaXNQYWNrZWQoZi5nZXROYW1lKCksIGZhbHNlKSkgew0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBlbHNlew0KICAgICAgICAgICAgICAgICAgICBTdHJpbmcgbWltZVR5cGUgPSBnZXRNaW1lVHlwZShmLmdldE5hbWUoKSk7DQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnNldENvbnRlbnRUeXBlKG1pbWVUeXBlKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbWVUeXBlLmVxdWFscygidGV4dC9wbGFpbiIpKSByZXNwb25zZS5zZXRIZWFkZXIoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtRGlzcG9zaXRpb24iLCAiaW5saW5lO2ZpbGVuYW1lPVwidGVtcC50eHRcIiIpOw0KICAgICAgICAgICAgICAgICAgICBlbHNlIHJlc3BvbnNlLnNldEhlYWRlcigiQ29udGVudC1EaXNwb3NpdGlvbiIsICJpbmxpbmU7ZmlsZW5hbWU9XCIiDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBmLmdldE5hbWUoKSArICJcIiIpOw0KICAgICAgICAgICAgICAgICAgICBCdWZmZXJlZElucHV0U3RyZWFtIGZpbGVJbnB1dCA9IG5ldyBC 
dWZmZXJlZElucHV0U3RyZWFtKG5ldyBGaWxlSW5wdXRTdHJlYW0oZikpOw0KICAgICAgICAgICAgICAgICAgICBieXRlIGJ1ZmZlcltdID0gbmV3IGJ5dGVbOCAqIDEwMjRdOw0KICAgICAgICAgICAgICAgICAgICBvdXQuY2xlYXJCdWZmZXIoKTsNCiAgICAgICAgICAgICAgICAgICAgT3V0cHV0U3RyZWFtIG91dF9zID0gbmV3IFdyaXRlcjJTdHJlYW0ob3V0KTsNCiAgICAgICAgICAgICAgICAgICAgY29weVN0cmVhbXNXaXRob3V0Q2xvc2UoZmlsZUlucHV0LCBvdXRfcywgYnVmZmVyKTsNCiAgICAgICAgICAgICAgICAgICAgZmlsZUlucHV0LmNsb3NlKCk7DQogICAgICAgICAgICAgICAgICAgIG91dF9zLmZsdXNoKCk7DQogICAgICAgICAgICAgICAgICAgIG5vaHRtbCA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIGRpcl92aWV3ID0gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImRpciIsIGYuZ2V0UGFyZW50KCkpOw0KICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJGaWxlICIgKyBmLmdldEFic29sdXRlUGF0aCgpDQogICAgICAgICAgICAgICAgICAgICAgICArICIgZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IHJlYWRhYmxlIG9uIHRoZSBzZXJ2ZXIiKTsNCiAgICAgICAgICAgIH0NCgkJfQ0KCQkvLyBEb3dubG9hZCBzZWxlY3RlZCBmaWxlcyBhcyB6aXAgZmlsZQ0KCQllbHNlIGlmICgocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIlN1Ym1pdCIpICE9IG51bGwpDQoJCQkJJiYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKS5lcXVhbHMoU0FWRV9BU19aSVApKSkgew0KCQkJVmVjdG9yIHYgPSBleHBhbmRGaWxlTGlzdChyZXF1ZXN0LmdldFBhcmFtZXRlclZhbHVlcygic2VsZmlsZSIpLCBmYWxzZSk7DQoJCQkvL0NoZWNrIGlmIGFsbCBmaWxlcyBpbiB2ZWN0b3IgYXJlIGFsbG93ZWQNCgkJCVN0cmluZyBub3RBbGxvd2VkRmlsZSA9IG51bGw7DQoJCQlmb3IgKGludCBpID0gMDtpIDwgdi5zaXplKCk7IGkrKyl7DQoJCQkJRmlsZSBmID0gKEZpbGUpIHYuZ2V0KGkpOw0KCQkJCWlmICghaXNBbGxvd2VkKGYsIGZhbHNlKSl7DQoJCQkJCW5vdEFsbG93ZWRGaWxlID0gZi5nZXRBYnNvbHV0ZVBhdGgoKTsNCgkJCQkJYnJlYWs7DQoJCQkJfQ0KCQkJfQ0KCQkJaWYgKG5vdEFsbG93ZWRGaWxlICE9IG51bGwpew0KCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyAiICsgbm90QWxsb3dlZEZpbGUpOw0KCQkJfQ0KCQkJZWxzZSBpZiAodi5zaXplKCkgPT0gMCkgew0KCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJObyBmaWxlcyBzZWxlY3RlZCIpOw0KCQkJfQ0KCQkJZWxzZSB7DQoJCQkJRmlsZSBkaXJfZmlsZSA9IG5ldyBGaWxlKCIiICsgcmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpKTsNCgkJCQlpbnQgZGlyX2wgPSBkaXJfZmlsZS5nZXRB 
YnNvbHV0ZVBhdGgoKS5sZW5ndGgoKTsNCgkJCQlyZXNwb25zZS5zZXRDb250ZW50VHlwZSgiYXBwbGljYXRpb24vemlwIik7DQoJCQkJcmVzcG9uc2Uuc2V0SGVhZGVyKCJDb250ZW50LURpc3Bvc2l0aW9uIiwgImF0dGFjaG1lbnQ7ZmlsZW5hbWU9XCJyZW5hbWVfbWUuemlwXCIiKTsNCgkJCQlvdXQuY2xlYXJCdWZmZXIoKTsNCgkJCQlaaXBPdXRwdXRTdHJlYW0gemlwb3V0ID0gbmV3IFppcE91dHB1dFN0cmVhbShuZXcgV3JpdGVyMlN0cmVhbShvdXQpKTsNCgkJCQl6aXBvdXQuc2V0Q29tbWVudCgiQ3JlYXRlZCBieSBadWJpbiB2LiAiICsgVkVSU0lPTl9OUik7DQoJCQkJemlwb3V0LnNldExldmVsKENPTVBSRVNTSU9OX0xFVkVMKTsNCgkJCQlmb3IgKGludCBpID0gMDsgaSA8IHYuc2l6ZSgpOyBpKyspIHsNCgkJCQkJRmlsZSBmID0gKEZpbGUpIHYuZ2V0KGkpOw0KCQkJCQlpZiAoZi5jYW5SZWFkKCkpIHsNCgkJCQkJCXppcG91dC5wdXROZXh0RW50cnkobmV3IFppcEVudHJ5KGYuZ2V0QWJzb2x1dGVQYXRoKCkuc3Vic3RyaW5nKGRpcl9sICsgMSkpKTsNCgkJCQkJCUJ1ZmZlcmVkSW5wdXRTdHJlYW0gZnIgPSBuZXcgQnVmZmVyZWRJbnB1dFN0cmVhbShuZXcgRmlsZUlucHV0U3RyZWFtKGYpKTsNCgkJCQkJCWJ5dGUgYnVmZmVyW10gPSBuZXcgYnl0ZVsweGZmZmZdOw0KCQkJCQkJY29weVN0cmVhbXNXaXRob3V0Q2xvc2UoZnIsIHppcG91dCwgYnVmZmVyKTsNCgkJCQkJCS8qCQkJCQlpbnQgYjsNCgkJCQkJCSB3aGlsZSAoKGI9ZnIucmVhZCgpKSE9LTEpIHppcG91dC53cml0ZShiKTsqLw0KCQkJCQkJZnIuY2xvc2UoKTsNCgkJCQkJCXppcG91dC5jbG9zZUVudHJ5KCk7DQoJCQkJCX0NCgkJCQl9DQoJCQkJemlwb3V0LmZpbmlzaCgpOw0KCQkJCW91dC5mbHVzaCgpOw0KCQkJCW5vaHRtbCA9IHRydWU7DQoJCQkJZGlyX3ZpZXcgPSBmYWxzZTsNCgkJCX0NCgkJfQ0KCQkvLyBEb3dubG9hZCBmaWxlDQoJCWVsc2UgaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJkb3duZmlsZSIpICE9IG51bGwpIHsNCgkJCVN0cmluZyBmaWxlUGF0aCA9IHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJkb3duZmlsZSIpOw0KCQkJRmlsZSBmID0gbmV3IEZpbGUoZmlsZVBhdGgpOw0KCQkJaWYgKCFpc0FsbG93ZWQoZiwgZmFsc2UpKXsNCgkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZGlyIiwgZi5nZXRQYXJlbnQoKSk7DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyBmLmdldEFic29sdXRlRmlsZSgpKTsNCgkJCX0NCgkJCWVsc2UgaWYgKGYuZXhpc3RzKCkgJiYgZi5jYW5SZWFkKCkpIHsNCgkJCQlyZXNwb25zZS5zZXRDb250ZW50VHlwZSgiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtIik7DQoJCQkJcmVzcG9uc2Uuc2V0SGVhZGVyKCJDb250ZW50LURpc3Bvc2l0aW9uIiwgImF0dGFjaG1lbnQ7ZmlsZW5hbWU9XCIiICsgZi5nZXROYW1lKCkNCgkJCQkJCSsgIlwiIik7DQoJCQkJcmVzcG9uc2Uuc2V0Q29udGVudExlbmd0aCgoaW50KSBmLmxl 
bmd0aCgpKTsNCgkJCQlCdWZmZXJlZElucHV0U3RyZWFtIGZpbGVJbnB1dCA9IG5ldyBCdWZmZXJlZElucHV0U3RyZWFtKG5ldyBGaWxlSW5wdXRTdHJlYW0oZikpOw0KCQkJCWJ5dGUgYnVmZmVyW10gPSBuZXcgYnl0ZVs4ICogMTAyNF07DQoJCQkJb3V0LmNsZWFyQnVmZmVyKCk7DQoJCQkJT3V0cHV0U3RyZWFtIG91dF9zID0gbmV3IFdyaXRlcjJTdHJlYW0ob3V0KTsNCgkJCQljb3B5U3RyZWFtc1dpdGhvdXRDbG9zZShmaWxlSW5wdXQsIG91dF9zLCBidWZmZXIpOw0KCQkJCWZpbGVJbnB1dC5jbG9zZSgpOw0KCQkJCW91dF9zLmZsdXNoKCk7DQoJCQkJbm9odG1sID0gdHJ1ZTsNCgkJCQlkaXJfdmlldyA9IGZhbHNlOw0KCQkJfQ0KCQkJZWxzZSB7DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImRpciIsIGYuZ2V0UGFyZW50KCkpOw0KCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJGaWxlICIgKyBmLmdldEFic29sdXRlUGF0aCgpDQoJCQkJCQkrICIgZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IHJlYWRhYmxlIG9uIHRoZSBzZXJ2ZXIiKTsNCgkJCX0NCgkJfQ0KCQlpZiAobm9odG1sKSByZXR1cm47DQoJCS8vZWxzZQ0KCQkJLy8gSWYgbm8gcGFyYW1ldGVyIGlzIHN1Ym1pdHRlZCwgaXQgd2lsbCB0YWtlIHRoZSBwYXRoIGZyb20ganNwIGZpbGUgYnJvd3Nlcg0KCQkJaWYgKHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSA9PSBudWxsKSB7DQoJCQkJU3RyaW5nIHBhdGggPSBudWxsOw0KCQkJCWlmIChhcHBsaWNhdGlvbi5nZXRSZWFsUGF0aChyZXF1ZXN0LmdldFJlcXVlc3RVUkkoKSkgIT0gbnVsbCkgew0KCQkJCQlGaWxlIGYgPSBuZXcgRmlsZShhcHBsaWNhdGlvbi5nZXRSZWFsUGF0aChyZXF1ZXN0LmdldFJlcXVlc3RVUkkoKSkpLmdldFBhcmVudEZpbGUoKTsNCgkJCQkJLy9UaGlzIGlzIGEgaGFjayBuZWVkZWQgZm9yIHRvbWNhdA0KCQkJCQl3aGlsZSAoZiAhPSBudWxsICYmICFmLmV4aXN0cygpKQ0KCQkJCQkJZiA9IGYuZ2V0UGFyZW50RmlsZSgpOw0KCQkJCQlpZiAoZiAhPSBudWxsKQ0KCQkJCQkJcGF0aCA9IGYuZ2V0QWJzb2x1dGVQYXRoKCk7DQoJCQkJfQ0KCQkJCWlmIChwYXRoID09IG51bGwpIHsgLy8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHdlIGFyZSBub3QgaW4gYSBkaXJlY3RvcnkgKGV4OiB3YXIgZmlsZSkNCgkJCQkJcGF0aCA9IG5ldyBGaWxlKCIuIikuZ2V0QWJzb2x1dGVQYXRoKCk7DQoJCQkJfQ0KCQkJCS8vQ2hlY2sgcGF0aA0KICAgICAgICAgICAgICAgIGlmICghaXNBbGxvd2VkKG5ldyBGaWxlKHBhdGgpLCBmYWxzZSkpew0KICAgICAgICAgICAgICAgIAkvL1RPRE8gQmxhY2tsaXN0DQogICAgICAgICAgICAgICAgICAgIGlmIChSRVNUUklDVF9QQVRILmluZGV4T2YoIjsiKTwwKSBwYXRoID0gUkVTVFJJQ1RfUEFUSDsNCiAgICAgICAgICAgICAgICAgICAgZWxzZSBwYXRoID0gUkVTVFJJQ1RfUEFUSC5zdWJzdHJpbmcoMCwgUkVTVFJJQ1RfUEFUSC5pbmRleE9mKCI7IikpOw0KICAgICAgICAgICAgICAgIH0NCgkJCQlyZXF1ZXN0LnNldEF0dHJp 
YnV0ZSgiZGlyIiwgcGF0aCk7DQoJCQl9JT4NCjwhRE9DVFlQRSBIVE1MIFBVQkxJQyAiLS8vVzNDLy9EVEQgSFRNTCA0LjAxIFRyYW5zaXRpb25hbC8vRU4iDQoiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvbG9vc2UuZHRkIj4NCjxodG1sPg0KPGhlYWQ+DQo8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1JU08tODg1OS0xIj4NCjxtZXRhIG5hbWU9InJvYm90cyIgY29udGVudD0ibm9pbmRleCI+DQo8bWV0YSBodHRwLWVxdWl2PSJleHBpcmVzIiBjb250ZW50PSIwIj4NCjxtZXRhIGh0dHAtZXF1aXY9InByYWdtYSIgY29udGVudD0ibm8tY2FjaGUiPg0KPHRpdGxlPlp1YmluIC0gV2VsY29tZTwvdGl0bGU+DQoNCjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+DQpib2R5IHsNCglmb250LXNpemU6IDE0cHg7DQoJZm9udC1mYW1pbHk6ICJBcmlhbCI7DQoJYmFja2dyb3VuZC1jb2xvcjogIzY2NjsNCgljb2xvcjogI2ZmZjsNCn0NCnRkIHsNCglmb250LXNpemU6IDE0cHg7DQoJZm9udC1mYW1pbHk6ICJBcmlhbCI7DQp9DQppbnB1dC5idXR0b24gew0KCWZvbnQtZmFtaWx5OiAiQXJpYWwiOw0KICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7DQogICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsNCiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDsNCiAgICBib3JkZXItcmFkaXVzOiA0cHg7DQogICAgY3Vyc29yOiBwb2ludGVyOw0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCiAgICBmb250LXNpemU6IDE0cHg7DQogICAgZm9udC13ZWlnaHQ6IDQwMDsNCiAgICBsaW5lLWhlaWdodDogMS40Mjg1NzsNCiAgICBtYXJnaW4tYm90dG9tOiAwOw0KICAgIHBhZGRpbmc6IDZweCAxMnB4Ow0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOw0KICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7DQogICAgYmFja2dyb3VuZC1jb2xvcjogIzViYzBkZTsNCiAgICBib3JkZXItY29sb3I6ICM0NmI4ZGE7DQogICAgY29sb3I6ICNmZmY7DQp9DQoJaW5wdXQudGV4dGZpZWxkW3R5cGU9J3RleHQnXSB7DQoJICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQoJICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7DQoJICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7DQoJICAgIGJvcmRlci1yYWRpdXM6IDRweDsNCgkgICAgYm94LXNoYWRvdzogMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNzUpIGluc2V0Ow0KCSAgICBjb2xvcjogIzU1NTsNCgkgICAgZGlzcGxheTogYmxvY2s7DQoJICAgIGZvbnQtc2l6ZTogMTRweDsNCgkgICAgaGVpZ2h0OiAzNHB4Ow0KCSAgICBsaW5lLWhlaWdodDogMS40Mjg1NzsNCgkgICAgcGFkZGluZzogNnB4IDEycHg7DQoJICAgIHRyYW5zaXRpb246IGJvcmRlci1jb2xvciAwLjE1cyBlYXNlLWluLW91dCAwcywgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dCAwczsNCgkgICAgbWFyZ2luOiA1cHggMHB4IDVweDsNCgkgICAgd2lkdGg6IDI4MHB4Ow0KCX0NCgl0YWJsZS5maWxl 
bGlzdCB7YmFja2dyb3VuZC1jb2xvcjojNjY2NjY2OyB3aWR0aDoxMDAlOyBib3JkZXI6MHB4IG5vbmUgI2ZmZmZmZn0NCgkuZm9ybXVsYXIge21hcmdpbjogMXB4OyBiYWNrZ3JvdW5kLWNvbG9yOiM2NjY2NjY7IHBhZGRpbmc6IDFlbTsgYm9yZGVyOjFweCBzb2xpZCAjNzA4MDkwO2NvbG9yOiAjZmZmO30NCgkuZm9ybXVsYXIyIHttYXJnaW46IDFweDtjb2xvcjogI2ZmZjt9DQogIAl0aCB7IGJhY2tncm91bmQtY29sb3I6ICM1YmMwZGU7Y29sb3I6ICNmZmZmZmY7Zm9udC1zaXplOjE1cHg7cGFkZGluZzogM3B4OyB9DQogIAl0aCBheyBjb2xvcjogI2ZmZmZmZjt9DQoJdHIubW91c2VvdXQgeyBiYWNrZ3JvdW5kLWNvbG9yOiNmZmZmZmY7IH0NCgl0ci5tb3VzZWluICB7IGJhY2tncm91bmQtY29sb3I6I2VlZWVlZTsgfQ0KCXRyLmNoZWNrZWQgIHsgYmFja2dyb3VuZC1jb2xvcjojY2NjY2NjIH0NCgl0ci5tb3VzZWNoZWNrZWQgeyBiYWNrZ3JvdW5kLWNvbG9yOiNjMGMwYzAgfQ0KCXRkIHsgZm9udC1mYW1pbHk6VmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMXB4OyBjb2xvcjogI2NjYztwYWRkaW5nOiAzcHg7fQ0KCXRkLm1lc3NhZ2UgeyBiYWNrZ3JvdW5kLWNvbG9yOiAjM0NCMzcxOyBjb2xvcjogI2ZmZjsgdGV4dC1hbGlnbjpjZW50ZXI7IHBhZGRpbmc6IDEwcHggMHB4IDEwcHg7Ym9yZGVyOjFweCBzb2xpZCAjNzA4MDkwO30NCgl0ZC5lcnJvciB7IGJhY2tncm91bmQtY29sb3I6ICNGRjAwMDA7IGNvbG9yOiAjZmZmOyB0ZXh0LWFsaWduOmNlbnRlcjsgcGFkZGluZzogMTBweCAwcHggMTBweDtib3JkZXI6MXB4IHNvbGlkICM3MDgwOTA7fQ0KCUEgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7Y29sb3I6ICMwMDgwMDA7IH0NCglBOkhvdmVyIHsgY29sb3IgOiAjRkYwMDAwOyB0ZXh0LWRlY29yYXRpb24gOiB1bmRlcmxpbmU7IH0NCglCT0RZIHsgZm9udC1mYW1pbHk6IEFyaWFsOyBmb250LXNpemU6IDEycHg7IGNvbG9yOiAjZmZmO30NCgl0ci5tb3VzZW91dDpudGgtY2hpbGQoZXZlbil7DQoJCWJhY2tncm91bmQ6ICNmZmZmZmY7DQoJfQ0KDQoJdHIubW91c2VvdXQ6bnRoLWNoaWxkKG9kZCl7DQoJCWJhY2tncm91bmQ6ICNGMEY4RkY7DQoJfQ0KLmJyZWFkY3J1bWIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQogICAgYm9yZGVyLXJhZGl1czogNHB4Ow0KICAgIGxpc3Qtc3R5bGU6IG91dHNpZGUgbm9uZSBub25lOw0KICAgIG1hcmdpbi1ib3R0b206IDIwcHg7DQogICAgcGFkZGluZzogOHB4IDE1cHg7DQp9DQoNCi5icmVhZGNydW1iID4gbGkgew0KICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsNCn0NCi5icmVhZGNydW1iID4gbGkgKyBsaTo6YmVmb3JlIHsNCiAgICBjb2xvcjogI2NjYzsNCiAgICBjb250ZW50OiAiLyAiOw0KICAgIHBhZGRpbmc6IDAgNXB4Ow0KfQ0KLmJyZWFkY3J1bWIgPiAuYWN0aXZlIHsNCiAgICBjb2xvcjogIzc3NzsNCn0NCg0Kb2wsIHVsIHsNCiAgICBtYXJnaW4tYm90dG9tOiAxMHB4Ow0KICAgIG1hcmdp 
bi10b3A6IDA7DQp9DQo8L3N0eWxlPg0KCQk8JQ0KICAgICAgICAvL0NoZWNrIHBhdGgNCiAgICAgICAgaWYgKCFpc0FsbG93ZWQobmV3IEZpbGUoKFN0cmluZylyZXF1ZXN0LmdldEF0dHJpYnV0ZSgiZGlyIikpLCBmYWxzZSkpew0KICAgICAgICAgICAgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyByZXF1ZXN0LmdldEF0dHJpYnV0ZSgiZGlyIikpOw0KICAgICAgICB9DQoJCS8vVXBsb2FkIG1vbml0b3INCgkJZWxzZSBpZiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoInVwbE1vbml0b3IiKSAhPSBudWxsKSB7JT4NCgk8c3R5bGUgdHlwZT0idGV4dC9jc3MiPg0KCQlCT0RZIHsgZm9udC1mYW1pbHk6VmVyZGFuYSwgQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiA4cHQ7IGNvbG9yOiAjZmZmO30NCgk8L3N0eWxlPjwlDQoJCQlTdHJpbmcgZm5hbWUgPSByZXF1ZXN0LmdldFBhcmFtZXRlcigidXBsTW9uaXRvciIpOw0KCQkJLy9GaXJzdCBvcGVuaW5nDQoJCQlib29sZWFuIGZpcnN0ID0gZmFsc2U7DQoJCQlpZiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoImZpcnN0IikgIT0gbnVsbCkgZmlyc3QgPSB0cnVlOw0KCQkJVXBsSW5mbyBpbmZvID0gbmV3IFVwbEluZm8oKTsNCgkJCWlmICghZmlyc3QpIHsNCgkJCQlpbmZvID0gVXBsb2FkTW9uaXRvci5nZXRJbmZvKGZuYW1lKTsNCgkJCQlpZiAoaW5mbyA9PSBudWxsKSB7DQoJCQkJCS8vV2luZG93cw0KCQkJCQlpbnQgcG9zaSA9IGZuYW1lLmxhc3RJbmRleE9mKCJcXCIpOw0KCQkJCQlpZiAocG9zaSAhPSAtMSkgaW5mbyA9IFVwbG9hZE1vbml0b3IuZ2V0SW5mbyhmbmFtZS5zdWJzdHJpbmcocG9zaSArIDEpKTsNCgkJCQl9DQoJCQkJaWYgKGluZm8gPT0gbnVsbCkgew0KCQkJCQkvL1VuaXgNCgkJCQkJaW50IHBvc2kgPSBmbmFtZS5sYXN0SW5kZXhPZigiLyIpOw0KCQkJCQlpZiAocG9zaSAhPSAtMSkgaW5mbyA9IFVwbG9hZE1vbml0b3IuZ2V0SW5mbyhmbmFtZS5zdWJzdHJpbmcocG9zaSArIDEpKTsNCgkJCQl9DQoJCQl9DQoJCQlkaXJfdmlldyA9IGZhbHNlOw0KCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImRpciIsIG51bGwpOw0KCQkJaWYgKGluZm8uYWJvcnRlZCkgew0KCQkJCVVwbG9hZE1vbml0b3IucmVtb3ZlKGZuYW1lKTsNCgkJCQklPg0KPC9oZWFkPg0KPGJvZHk+DQo8Yj5VcGxvYWQgb2YgPCU9Zm5hbWUlPjwvYj48YnI+PGJyPg0KVXBsb2FkIGFib3J0ZWQuPC9ib2R5Pg0KPC9odG1sPjwlDQoJCQl9DQoJCQllbHNlIGlmIChpbmZvLnRvdGFsU2l6ZSAhPSBpbmZvLmN1cnJTaXplIHx8IGluZm8uY3VyclNpemUgPT0gMCkgew0KCQkJCSU+DQo8TUVUQSBIVFRQLUVRVUlWPSJSZWZyZXNoIiBDT05URU5UPSI8JT1VUExPQURfTU9OSVRPUl9SRUZSRVNIJT47VVJMPTwlPWJyb3dzZXJfbmFtZSAlPj91cGxNb25pdG9yPTwlPVVSTEVuY29kZXIuZW5jb2RlKGZuYW1lKSU+Ij4NCjwvaGVhZD4NCjxib2R5Pg0KPGI+VXBsb2FkIG9mIDwlPWZuYW1lJT48L2I+PGJy 
Pjxicj4NCjxjZW50ZXI+DQo8dGFibGUgaGVpZ2h0PSIyMHB4IiB3aWR0aD0iOTAlIiBiZ2NvbG9yPSIjZWVlZWVlIiBzdHlsZT0iYm9yZGVyOjFweCBzb2xpZCAjNzA4MDkwIj48dHI+DQo8dGQgYmdjb2xvcj0iYmx1ZSIgd2lkdGg9IjwlPWluZm8uZ2V0UGVyY2VudCgpJT4lIj48L3RkPjx0ZCB3aWR0aD0iPCU9MTAwLWluZm8uZ2V0UGVyY2VudCgpJT4lIj48L3RkPg0KPC90cj48L3RhYmxlPjwvY2VudGVyPg0KPCU9Y29udmVydEZpbGVTaXplKGluZm8uY3VyclNpemUpJT4gZnJvbSA8JT1jb252ZXJ0RmlsZVNpemUoaW5mby50b3RhbFNpemUpJT4NCig8JT1pbmZvLmdldFBlcmNlbnQoKSU+ICUpIHVwbG9hZGVkIChTcGVlZDogPCU9aW5mby5nZXRVcHJhdGUoKSU+KS48YnI+DQpUaW1lOiA8JT1pbmZvLmdldFRpbWVFbGFwc2VkKCklPiBmcm9tIDwlPWluZm8uZ2V0VGltZUVzdGltYXRlZCgpJT4NCjwvYm9keT4NCjwvaHRtbD48JQ0KCQkJfQ0KCQkJZWxzZSB7DQoJCQkJVXBsb2FkTW9uaXRvci5yZW1vdmUoZm5hbWUpOw0KCQkJCSU+DQo8L2hlYWQ+DQo8Ym9keSBvbmxvYWQ9ImphdmFzY3JpcHQ6d2luZG93LmNsb3NlKCkiPg0KPGI+VXBsb2FkIG9mIDwlPWZuYW1lJT48L2I+PGJyPjxicj4NClVwbG9hZCBmaW5pc2hlZC4NCjwvYm9keT4NCjwvaHRtbD48JQ0KCQkJfQ0KCQl9DQoJCS8vQ29tYW5kd2luZG93DQoJCWVsc2UgaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjb21tYW5kIikgIT0gbnVsbCkgew0KICAgICAgICAgICAgaWYgKCFOQVRJVkVfQ09NTUFORFMpew0KICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJFeGVjdXRpb24gb2YgbmF0aXZlIGNvbW1hbmRzIGlzIG5vdCBhbGxvd2VkISIpOw0KICAgICAgICAgICAgfQ0KCQkJZWxzZSBpZiAoISJDYW5jZWwiLmVxdWFsc0lnbm9yZUNhc2UocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIlN1Ym1pdCIpKSkgew0KJT4NCjx0aXRsZT5MYXVuY2ggY29tbWFuZHMgaW4gPCU9cmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpJT48L3RpdGxlPg0KPC9oZWFkPg0KPGJvZHk+PGNlbnRlcj4NCjxoMj48JT1MQVVOQ0hfQ09NTUFORCAlPjwvaDI+PGJyIC8+DQo8JQ0KCQkJCW91dC5wcmludGxuKCI8Zm9ybSBhY3Rpb249XCIiICsgYnJvd3Nlcl9uYW1lICsgIlwiIG1ldGhvZD1cIlBvc3RcIj5cbiINCgkJCQkJCSsgIjx0ZXh0YXJlYSBuYW1lPVwidGV4dFwiIHdyYXA9XCJvZmZcIiBjb2xzPVwiIiArIEVESVRGSUVMRF9DT0xTDQoJCQkJCQkrICJcIiByb3dzPVwiIiArIEVESVRGSUVMRF9ST1dTICsgIlwiIHJlYWRvbmx5PiIpOw0KCQkJCVN0cmluZyByZXQgPSAiIjsNCgkJCQlpZiAoIXJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjb21tYW5kIikuZXF1YWxzSWdub3JlQ2FzZSgiIikpDQogICAgICAgICAgICAgICAgICAgIHJldCA9IHN0YXJ0UHJvY2VzcygNCgkJCQkJCXJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjb21tYW5kIiksIChTdHJpbmcpIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSk7DQoJCQkJb3V0LnByaW50bG4ocmV0 
KTsNCiU+PC90ZXh0YXJlYT4NCgk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJkaXIiIHZhbHVlPSI8JT0gcmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpJT4iPg0KCTxiciAvPjxiciAvPg0KCTx0YWJsZSBjbGFzcz0iZm9ybXVsYXIiPg0KCTx0cj48dGQgdGl0bGU9IkVudGVyIHlvdXIgY29tbWFuZCI+DQoJQ29tbWFuZDogPGlucHV0IHNpemU9IjwlPUVESVRGSUVMRF9DT0xTLTUlPiIgdHlwZT0idGV4dCIgbmFtZT0iY29tbWFuZCIgdmFsdWU9IiI+DQoJPC90ZD48L3RyPg0KCTx0cj48dGQ+PGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9IlN1Ym1pdCIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iTGF1bmNoIj4NCgk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzb3J0IiB2YWx1ZT0iPCU9cmVxdWVzdC5nZXRQYXJhbWV0ZXIoInNvcnQiKSU+Ij4NCgk8aW5wdXQgdHlwZT0iU3VibWl0IiBjbGFzcz0iYnV0dG9uIiBuYW1lPSJTdWJtaXQiIHZhbHVlPSJDYW5jZWwiPjwvdGQ+PC90cj4NCgk8L3RhYmxlPg0KCTwvZm9ybT4NCgk8YnIgLz4NCgk8aHI+DQoJPC9jZW50ZXI+DQo8L2JvZHk+DQo8L2h0bWw+DQo8JQ0KCQkJCWRpcl92aWV3ID0gZmFsc2U7DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImRpciIsIG51bGwpOw0KCQkJfQ0KCQl9DQoJCWVsc2UgaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJmaWxlIikgIT0gbnVsbCkgew0KCQkJRmlsZSBmID0gbmV3IEZpbGUocmVxdWVzdC5nZXRQYXJhbWV0ZXIoImZpbGUiKSk7DQogICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChmLCBmYWxzZSkpew0KICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyAiICsgZi5nZXRBYnNvbHV0ZVBhdGgoKSk7DQogICAgICAgICAgICB9DQoJCQllbHNlIGlmIChpc1BhY2tlZChmLmdldE5hbWUoKSwgZmFsc2UpKSB7DQoJCQkJLy9aaXBGaWxlDQoJCQkJdHJ5IHsNCgkJCQkJWmlwRmlsZSB6ZiA9IG5ldyBaaXBGaWxlKGYpOw0KCQkJCQlFbnVtZXJhdGlvbiBlbnRyaWVzID0gemYuZW50cmllcygpOw0KJT4NCjx0aXRsZT48JT0gZi5nZXRBYnNvbHV0ZVBhdGgoKSU+PC90aXRsZT4NCjwvaGVhZD4NCjxib2R5Pg0KCTxoMj5Db250ZW50IG9mIDwlPWNvbnYySHRtbChmLmdldE5hbWUoKSklPjwvaDI+PGJyIC8+DQoJPHRhYmxlIGNsYXNzPSJmaWxlbGlzdCIgY2VsbHNwYWNpbmc9IjBweCIgY2VsbHBhZGRpbmc9IjBweCI+DQoJPHRoPk5hbWU8L3RoPjx0aD5VbmNvbXByZXNzZWQgc2l6ZTwvdGg+PHRoPkNvbXByZXNzZWQgc2l6ZTwvdGg+PHRoPkNvbXByLiByYXRpbzwvdGg+PHRoPkRhdGU8L3RoPg0KPCUNCgkJCQkJbG9uZyBzaXplID0gMDsNCgkJCQkJaW50IGZpbGVDb3VudCA9IDA7DQoJCQkJCXdoaWxlIChlbnRyaWVzLmhhc01vcmVFbGVtZW50cygpKSB7DQoJCQkJCQlaaXBFbnRyeSBlbnRyeSA9IChaaXBFbnRyeSkgZW50cmllcy5uZXh0RWxlbWVudCgpOw0KCQkJCQkJaWYgKCFlbnRyeS5pc0RpcmVjdG9yeSgpKSB7DQoJCQkJCQkJ 
ZmlsZUNvdW50Kys7DQoJCQkJCQkJc2l6ZSArPSBlbnRyeS5nZXRTaXplKCk7DQoJCQkJCQkJbG9uZyByYXRpbyA9IDA7DQoJCQkJCQkJaWYgKGVudHJ5LmdldFNpemUoKSAhPSAwKSByYXRpbyA9IChlbnRyeS5nZXRDb21wcmVzc2VkU2l6ZSgpICogMTAwKQ0KCQkJCQkJCQkJLyBlbnRyeS5nZXRTaXplKCk7DQoJCQkJCQkJb3V0LnByaW50bG4oIjx0ciBjbGFzcz1cIm1vdXNlb3V0XCI+PHRkPiIgKyBjb252Mkh0bWwoZW50cnkuZ2V0TmFtZSgpKQ0KCQkJCQkJCQkJKyAiPC90ZD48dGQ+IiArIGNvbnZlcnRGaWxlU2l6ZShlbnRyeS5nZXRTaXplKCkpICsgIjwvdGQ+PHRkPiINCgkJCQkJCQkJCSsgY29udmVydEZpbGVTaXplKGVudHJ5LmdldENvbXByZXNzZWRTaXplKCkpICsgIjwvdGQ+PHRkPiINCgkJCQkJCQkJCSsgcmF0aW8gKyAiJSIgKyAiPC90ZD48dGQ+Ig0KCQkJCQkJCQkJKyBkYXRlRm9ybWF0LmZvcm1hdChuZXcgRGF0ZShlbnRyeS5nZXRUaW1lKCkpKSArICI8L3RkPjwvdHI+Iik7DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQkJemYuY2xvc2UoKTsNCgkJCQkJLy9ObyBkaXJlY3Rvcnkgdmlldw0KCQkJCQlkaXJfdmlldyA9IGZhbHNlOw0KCQkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZGlyIiwgbnVsbCk7DQolPg0KCTwvdGFibGU+DQoJPHAgYWxpZ249Y2VudGVyPg0KCTxiPjwlPWNvbnZlcnRGaWxlU2l6ZShzaXplKSU+IGluIDwlPWZpbGVDb3VudCU+IGZpbGVzIGluIDwlPWYuZ2V0TmFtZSgpJT4uIENvbXByZXNzaW9uIHJhdGlvOiA8JT0oZi5sZW5ndGgoKSAqIDEwMCkgLyBzaXplJT4lDQoJPC9iPjwvcD4NCjwvYm9keT48L2h0bWw+DQo8JQ0KCQkJCX0NCgkJCQljYXRjaCAoWmlwRXhjZXB0aW9uIGV4KSB7DQoJCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJDYW5ub3QgcmVhZCAiICsgZi5nZXROYW1lKCkNCgkJCQkJCQkrICIsIG5vIHZhbGlkIHppcCBmaWxlIik7DQoJCQkJfQ0KCQkJCWNhdGNoIChJT0V4Y2VwdGlvbiBleCkgew0KCQkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiUmVhZGluZyBvZiAiICsgZi5nZXROYW1lKCkgKyAiIGFib3J0ZWQuIEVycm9yOiAiDQoJCQkJCQkJKyBleCk7DQoJCQkJfQ0KCQkJfQ0KCQl9DQoJCS8vIFVwbG9hZA0KCQllbHNlIGlmICgocmVxdWVzdC5nZXRDb250ZW50VHlwZSgpICE9IG51bGwpDQoJCQkJJiYgKHJlcXVlc3QuZ2V0Q29udGVudFR5cGUoKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoIm11bHRpcGFydCIpKSkgew0KCQkJaWYgKCFBTExPV19VUExPQUQpew0KICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJVcGxvYWQgaXMgZm9yYmlkZGVuISIpOw0KICAgICAgICAgICAgfQ0KCQkJcmVzcG9uc2Uuc2V0Q29udGVudFR5cGUoInRleHQvaHRtbCIpOw0KCQkJSHR0cE11bHRpUGFydFBhcnNlciBwYXJzZXIgPSBuZXcgSHR0cE11bHRpUGFydFBhcnNlcigpOw0KCQkJYm9vbGVhbiBlcnJvciA9IGZhbHNlOw0KCQkJdHJ5IHsNCgkJCQlpbnQgYnN0YXJ0ID0gcmVxdWVzdC5nZXRD 
b250ZW50VHlwZSgpLmxhc3RJbmRleE9mKCJvdW5kYXJ5PSIpOw0KCQkJCVN0cmluZyBib3VuZCA9IHJlcXVlc3QuZ2V0Q29udGVudFR5cGUoKS5zdWJzdHJpbmcoYnN0YXJ0ICsgOCk7DQoJCQkJaW50IGNsZW5ndGggPSByZXF1ZXN0LmdldENvbnRlbnRMZW5ndGgoKTsNCgkJCQlIYXNodGFibGUgaHQgPSBwYXJzZXINCgkJCQkJCS5wcm9jZXNzRGF0YShyZXF1ZXN0LmdldElucHV0U3RyZWFtKCksIGJvdW5kLCB0ZW1wZGlyLCBjbGVuZ3RoKTsNCiAgICAgICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChuZXcgRmlsZSgoU3RyaW5nKWh0LmdldCgiZGlyIikpLCBmYWxzZSkpew0KICAgICAgICAgICAgICAgICAgICAvL1RoaXMgaXMgYSBoYWNrLCBjb3Mgd2UgYXJlIHdyaXRpbmcgdG8gdGhpcyBkaXJlY3RvcnkNCiAgICAgICAgICAgICAgICAJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyBodC5nZXQoImRpciIpKTsNCiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCgkJCQllbHNlIGlmIChodC5nZXQoIm15RmlsZSIpICE9IG51bGwpIHsNCgkJCQkJRmlsZUluZm8gZmkgPSAoRmlsZUluZm8pIGh0LmdldCgibXlGaWxlIik7DQoJCQkJCUZpbGUgZiA9IGZpLmZpbGU7DQoJCQkJCVVwbEluZm8gaW5mbyA9IFVwbG9hZE1vbml0b3IuZ2V0SW5mbyhmaS5jbGllbnRGaWxlTmFtZSk7DQoJCQkJCWlmIChpbmZvICE9IG51bGwgJiYgaW5mby5hYm9ydGVkKSB7DQoJCQkJCQlmLmRlbGV0ZSgpOw0KCQkJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIlVwbG9hZCBhYm9ydGVkIik7DQoJCQkJCX0NCgkJCQkJZWxzZSB7DQoJCQkJCQkvLyBNb3ZlIGZpbGUgZnJvbSB0ZW1wIHRvIHRoZSByaWdodCBkaXINCgkJCQkJCVN0cmluZyBwYXRoID0gKFN0cmluZykgaHQuZ2V0KCJkaXIiKTsNCgkJCQkJCWlmICghcGF0aC5lbmRzV2l0aChGaWxlLnNlcGFyYXRvcikpIHBhdGggPSBwYXRoICsgRmlsZS5zZXBhcmF0b3I7DQoJCQkJCQlpZiAoIWYucmVuYW1lVG8obmV3IEZpbGUocGF0aCArIGYuZ2V0TmFtZSgpKSkpIHsNCgkJCQkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiQ2Fubm90IHVwbG9hZCBmaWxlLiIpOw0KCQkJCQkJCWVycm9yID0gdHJ1ZTsNCgkJCQkJCQlmLmRlbGV0ZSgpOw0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJfQ0KCQkJCWVsc2Ugew0KCQkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiTm8gZmlsZSBzZWxlY3RlZCBmb3IgdXBsb2FkIik7DQoJCQkJCWVycm9yID0gdHJ1ZTsNCgkJCQl9DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImRpciIsIChTdHJpbmcpIGh0LmdldCgiZGlyIikpOw0KCQkJfQ0KCQkJY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIkVycm9yICIgKyBlICsgIi4gVXBsb2FkIGFib3J0ZWQiKTsNCgkJCQllcnJvciA9IHRydWU7DQoJCQl9DQoJCQlpZiAoIWVycm9yKSByZXF1ZXN0 
LnNldEF0dHJpYnV0ZSgibWVzc2FnZSIsICJGaWxlIHVwbG9hZCBjb3JyZWN0bHkgZmluaXNoZWQuIik7DQoJCX0NCgkJLy8gVGhlIGZvcm0gdG8gZWRpdCBhIHRleHQgZmlsZQ0KCQllbHNlIGlmIChyZXF1ZXN0LmdldFBhcmFtZXRlcigiZWRpdGZpbGUiKSAhPSBudWxsKSB7DQoJCQlGaWxlIGVmID0gbmV3IEZpbGUocmVxdWVzdC5nZXRQYXJhbWV0ZXIoImVkaXRmaWxlIikpOw0KICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWQoZWYsIHRydWUpKXsNCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIiArIGVmLmdldEFic29sdXRlUGF0aCgpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2V7DQolPg0KPHRpdGxlPkVkaXQgPCU9Y29udjJIdG1sKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJlZGl0ZmlsZSIpKSU+PC90aXRsZT4NCjwvaGVhZD4NCjxib2R5Pg0KPGNlbnRlcj4NCjxoMj5FZGl0IDwlPWNvbnYySHRtbChyZXF1ZXN0LmdldFBhcmFtZXRlcigiZWRpdGZpbGUiKSklPjwvaDI+PGJyIC8+DQo8JQ0KICAgICAgICAgICAgICAgIEJ1ZmZlcmVkUmVhZGVyIHJlYWRlciA9IG5ldyBCdWZmZXJlZFJlYWRlcihuZXcgRmlsZVJlYWRlcihlZikpOw0KICAgICAgICAgICAgICAgIFN0cmluZyBkaXNhYmxlID0gIiI7DQogICAgICAgICAgICAgICAgaWYgKCFlZi5jYW5Xcml0ZSgpKSBkaXNhYmxlID0gIiByZWFkb25seSI7DQogICAgICAgICAgICAgICAgb3V0LnByaW50bG4oIjxmb3JtIGFjdGlvbj1cIiIgKyBicm93c2VyX25hbWUgKyAiXCIgbWV0aG9kPVwiUG9zdFwiPlxuIg0KICAgICAgICAgICAgICAgICAgICAgICAgKyAiPHRleHRhcmVhIG5hbWU9XCJ0ZXh0XCIgd3JhcD1cIm9mZlwiIGNvbHM9XCIiICsgRURJVEZJRUxEX0NPTFMNCiAgICAgICAgICAgICAgICAgICAgICAgICsgIlwiIHJvd3M9XCIiICsgRURJVEZJRUxEX1JPV1MgKyAiXCIiICsgZGlzYWJsZSArICI+Iik7DQogICAgICAgICAgICAgICAgU3RyaW5nIGM7DQogICAgICAgICAgICAgICAgLy8gV3JpdGUgb3V0IHRoZSBmaWxlIGFuZCBjaGVjayBpZiBpdCBpcyBhIHdpbiBvciB1bml4IGZpbGUNCiAgICAgICAgICAgICAgICBpbnQgaTsNCiAgICAgICAgICAgICAgICBib29sZWFuIGRvcyA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIGJvb2xlYW4gY3IgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICB3aGlsZSAoKGkgPSByZWFkZXIucmVhZCgpKSA+PSAwKSB7DQogICAgICAgICAgICAgICAgICAgIG91dC5wcmludChjb252Mkh0bWwoaSkpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSAnXHInKSBjciA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNyICYmIChpID09ICdcbicpKSBkb3MgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICBlbHNlIGNyID0gZmFsc2U7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlYWRlci5jbG9zZSgpOw0KICAgICAgICAgICAgICAgIC8vTm8gRmlsZSBk 
aXJlY3RvcnkgaXMgc2hvd24NCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZGlyIiwgbnVsbCk7DQogICAgICAgICAgICAgICAgZGlyX3ZpZXcgPSBmYWxzZTsNCg0KJT48L3RleHRhcmVhPjxiciAvPjxiciAvPg0KPHRhYmxlIGNsYXNzPSJmb3JtdWxhciI+DQoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmZpbGUiIHZhbHVlPSI8JT0gcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImVkaXRmaWxlIiklPiI+DQoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic29ydCIgdmFsdWU9IjwlPXJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJzb3J0IiklPiI+DQoJCTx0cj48dGQgY29sc3Bhbj0iMiI+PGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJsaW5lZm9ybWF0IiB2YWx1ZT0iZG9zIiA8JT0gZG9zPyJjaGVja2VkIjoiIiU+Pk1zLURvcy9XaW5kb3dzDQoJCTxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0ibGluZWZvcm1hdCIgdmFsdWU9InVuaXgiIDwlPSBkb3M/IiI6ImNoZWNrZWQiJT4+VW5peA0KCQk8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9IkJhY2t1cCIgY2hlY2tlZD5Xcml0ZSBiYWNrdXA8L3RkPjwvdHI+DQoJCTx0cj48dGQgdGl0bGU9IkVudGVyIHRoZSBuZXcgZmlsZW5hbWUiPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJuZXdfbmFtZSIgdmFsdWU9IjwlPWVmLmdldE5hbWUoKSU+Ij4NCgkJPGlucHV0IHR5cGU9IlN1Ym1pdCIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iU2F2ZSI+PC90ZD4NCgk8L2Zvcm0+DQoJPGZvcm0gYWN0aW9uPSI8JT1icm93c2VyX25hbWUlPiIgbWV0aG9kPSJQb3N0Ij4NCgk8dGQgYWxpZ249ImxlZnQiPg0KCTxpbnB1dCB0eXBlPSJTdWJtaXQiIG5hbWU9IlN1Ym1pdCIgdmFsdWU9IkNhbmNlbCI+DQoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmZpbGUiIHZhbHVlPSI8JT0gcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImVkaXRmaWxlIiklPiI+DQoJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic29ydCIgdmFsdWU9IjwlPXJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJzb3J0IiklPiI+DQoJPC90ZD4NCgk8L2Zvcm0+DQoJPC90cj4NCgk8L3RhYmxlPg0KCTwvY2VudGVyPg0KCTxiciAvPg0KCTxocj4NCjwvYm9keT4NCjwvaHRtbD4NCjwlDQogICAgICAgICAgICB9DQoJCX0NCgkJZWxzZSBpZiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIm5maWxlIikgIT0gbnVsbCkgew0KCQkJRmlsZSBmID0gbmV3IEZpbGUocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIm5maWxlIikpOw0KCQkJaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKS5lcXVhbHMoIlNhdmUiKSkgew0KCQkJCUZpbGUgbmV3X2YgPSBuZXcgRmlsZShnZXREaXIoZi5nZXRQYXJlbnQoKSwgcmVxdWVzdC5nZXRQYXJhbWV0ZXIoIm5ld19uYW1lIikpKTsNCgkgICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChuZXdfZiwgdHJ1ZSkpew0KCSAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIiArIG5ld19mLmdldEFi 
c29sdXRlUGF0aCgpKTsNCgkgICAgICAgICAgICB9DQoJCQkJaWYgKG5ld19mLmV4aXN0cygpICYmIG5ld19mLmNhbldyaXRlKCkgJiYgcmVxdWVzdC5nZXRQYXJhbWV0ZXIoIkJhY2t1cCIpICE9IG51bGwpIHsNCgkJCQkJRmlsZSBiYWsgPSBuZXcgRmlsZShuZXdfZi5nZXRBYnNvbHV0ZVBhdGgoKSArICIuYmFrIik7DQoJCQkJCWJhay5kZWxldGUoKTsNCgkJCQkJbmV3X2YucmVuYW1lVG8oYmFrKTsNCgkJCQl9DQoJCQkJaWYgKG5ld19mLmV4aXN0cygpICYmICFuZXdfZi5jYW5Xcml0ZSgpKSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLA0KCQkJCQkJIkNhbm5vdCB3cml0ZSB0byAiICsgbmV3X2YuZ2V0TmFtZSgpICsgIiwgZmlsZSBpcyB3cml0ZSBwcm90ZWN0ZWQuIik7DQoJCQkJZWxzZSB7DQoJCQkJCUJ1ZmZlcmVkV3JpdGVyIG91dHMgPSBuZXcgQnVmZmVyZWRXcml0ZXIobmV3IEZpbGVXcml0ZXIobmV3X2YpKTsNCgkJCQkJU3RyaW5nUmVhZGVyIHRleHQgPSBuZXcgU3RyaW5nUmVhZGVyKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJ0ZXh0IikpOw0KCQkJCQlpbnQgaTsNCgkJCQkJYm9vbGVhbiBjciA9IGZhbHNlOw0KCQkJCQlTdHJpbmcgbGluZWVuZCA9ICJcbiI7DQoJCQkJCWlmIChyZXF1ZXN0LmdldFBhcmFtZXRlcigibGluZWZvcm1hdCIpLmVxdWFscygiZG9zIikpIGxpbmVlbmQgPSAiXHJcbiI7DQoJCQkJCXdoaWxlICgoaSA9IHRleHQucmVhZCgpKSA+PSAwKSB7DQoJCQkJCQlpZiAoaSA9PSAnXHInKSBjciA9IHRydWU7DQoJCQkJCQllbHNlIGlmIChpID09ICdcbicpIHsNCgkJCQkJCQlvdXRzLndyaXRlKGxpbmVlbmQpOw0KCQkJCQkJCWNyID0gZmFsc2U7DQoJCQkJCQl9DQoJCQkJCQllbHNlIGlmIChjcikgew0KCQkJCQkJCW91dHMud3JpdGUobGluZWVuZCk7DQoJCQkJCQkJY3IgPSBmYWxzZTsNCgkJCQkJCX0NCgkJCQkJCWVsc2Ugew0KCQkJCQkJCW91dHMud3JpdGUoaSk7DQoJCQkJCQkJY3IgPSBmYWxzZTsNCgkJCQkJCX0NCgkJCQkJfQ0KCQkJCQlvdXRzLmZsdXNoKCk7DQoJCQkJCW91dHMuY2xvc2UoKTsNCgkJCQl9DQoJCQl9DQoJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZGlyIiwgZi5nZXRQYXJlbnQoKSk7DQoJCX0NCgkJZWxzZSBpZiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoInVucGFja2ZpbGUiKSAhPSBudWxsKSB7DQoJCQlGaWxlIGYgPSBuZXcgRmlsZShyZXF1ZXN0LmdldFBhcmFtZXRlcigidW5wYWNrZmlsZSIpKTsNCgkJCVN0cmluZyByb290ID0gZi5nZXRQYXJlbnQoKTsNCgkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJkaXIiLCByb290KTsNCiAgICAgICAgICAgIGlmICghaXNBbGxvd2VkKG5ldyBGaWxlKHJvb3QpLCB0cnVlKSl7DQogICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyByb290KTsNCiAgICAgICAgICAgIH0NCgkJCWVsc2UgaWYgKCFmLmV4aXN0cygpKSB7DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIkNhbm5vdCB1bnBhY2sgIiAr 
IGYuZ2V0TmFtZSgpDQoJCQkJCQkrICIsIGZpbGUgZG9lcyBub3QgZXhpc3QiKTsNCgkJCX0NCgkJCWVsc2UgaWYgKCFmLmdldFBhcmVudEZpbGUoKS5jYW5Xcml0ZSgpKSB7DQoJCQkJcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIkNhbm5vdCB1bnBhY2sgIiArIGYuZ2V0TmFtZSgpDQoJCQkJCQkrICIsIGRpcmVjdG9yeSBpcyB3cml0ZSBwcm90ZWN0ZWQuIik7DQoJCQl9DQoJCQkvL0daaXANCgkJCWVsc2UgaWYgKGYuZ2V0TmFtZSgpLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoIi5neiIpKSB7DQoJCQkJLy9OZXcgbmFtZSBpcyBvbGQgTmFtZSB3aXRob3V0IC5neg0KCQkJCVN0cmluZyBuZXdOYW1lID0gZi5nZXRBYnNvbHV0ZVBhdGgoKS5zdWJzdHJpbmcoMCwgZi5nZXRBYnNvbHV0ZVBhdGgoKS5sZW5ndGgoKSAtIDMpOw0KCQkJCXRyeSB7DQoJCQkJCWJ5dGUgYnVmZmVyW10gPSBuZXcgYnl0ZVsweGZmZmZdOw0KCQkJCQljb3B5U3RyZWFtcyhuZXcgR1pJUElucHV0U3RyZWFtKG5ldyBGaWxlSW5wdXRTdHJlYW0oZikpLCBuZXcgRmlsZU91dHB1dFN0cmVhbSgNCgkJCQkJCQluZXdOYW1lKSwgYnVmZmVyKTsNCgkJCQl9DQoJCQkJY2F0Y2ggKElPRXhjZXB0aW9uIGV4KSB7DQoJCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJVbnBhY2tpbmcgb2YgIiArIGYuZ2V0TmFtZSgpDQoJCQkJCQkJKyAiIGFib3J0ZWQuIEVycm9yOiAiICsgZXgpOw0KCQkJCX0NCgkJCX0NCgkJCS8vRWxzZSB0cnkgWmlwDQoJCQllbHNlIHsNCgkJCQl0cnkgew0KCQkJCQlaaXBGaWxlIHpmID0gbmV3IFppcEZpbGUoZik7DQoJCQkJCUVudW1lcmF0aW9uIGVudHJpZXMgPSB6Zi5lbnRyaWVzKCk7DQoJCQkJCS8vRmlyc3QgY2hlY2sgd2hldGhlciBhIGZpbGUgYWxyZWFkeSBleGlzdA0KCQkJCQlib29sZWFuIGVycm9yID0gZmFsc2U7DQoJCQkJCXdoaWxlIChlbnRyaWVzLmhhc01vcmVFbGVtZW50cygpKSB7DQoJCQkJCQlaaXBFbnRyeSBlbnRyeSA9IChaaXBFbnRyeSkgZW50cmllcy5uZXh0RWxlbWVudCgpOw0KCQkJCQkJaWYgKCFlbnRyeS5pc0RpcmVjdG9yeSgpDQoJCQkJCQkJCSYmIG5ldyBGaWxlKHJvb3QgKyBGaWxlLnNlcGFyYXRvciArIGVudHJ5LmdldE5hbWUoKSkuZXhpc3RzKCkpIHsNCgkJCQkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiQ2Fubm90IHVucGFjayAiICsgZi5nZXROYW1lKCkNCgkJCQkJCQkJCSsgIiwgRmlsZSAiICsgZW50cnkuZ2V0TmFtZSgpICsgIiBhbHJlYWR5IGV4aXN0cy4iKTsNCgkJCQkJCQllcnJvciA9IHRydWU7DQoJCQkJCQkJYnJlYWs7DQoJCQkJCQl9DQoJCQkJCX0NCgkJCQkJaWYgKCFlcnJvcikgew0KCQkJCQkJLy9VbnBhY2sgRmlsZQ0KCQkJCQkJZW50cmllcyA9IHpmLmVudHJpZXMoKTsNCgkJCQkJCWJ5dGUgYnVmZmVyW10gPSBuZXcgYnl0ZVsweGZmZmZdOw0KCQkJCQkJd2hpbGUgKGVudHJpZXMuaGFzTW9yZUVsZW1lbnRzKCkpIHsNCgkJCQkJCQlaaXBFbnRyeSBlbnRyeSA9IChaaXBFbnRyeSkgZW50cmllcy5uZXh0RWxlbWVudCgpOw0K 
CQkJCQkJCUZpbGUgbiA9IG5ldyBGaWxlKHJvb3QgKyBGaWxlLnNlcGFyYXRvciArIGVudHJ5LmdldE5hbWUoKSk7DQoJCQkJCQkJaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkpIG4ubWtkaXJzKCk7DQoJCQkJCQkJZWxzZSB7DQoJCQkJCQkJCW4uZ2V0UGFyZW50RmlsZSgpLm1rZGlycygpOw0KCQkJCQkJCQluLmNyZWF0ZU5ld0ZpbGUoKTsNCgkJCQkJCQkJY29weVN0cmVhbXMoemYuZ2V0SW5wdXRTdHJlYW0oZW50cnkpLCBuZXcgRmlsZU91dHB1dFN0cmVhbShuKSwNCgkJCQkJCQkJCQlidWZmZXIpOw0KCQkJCQkJCX0NCgkJCQkJCX0NCgkJCQkJCXpmLmNsb3NlKCk7DQoJCQkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgibWVzc2FnZSIsICJVbnBhY2sgb2YgIiArIGYuZ2V0TmFtZSgpDQoJCQkJCQkJCSsgIiB3YXMgc3VjY2Vzc2Z1bC4iKTsNCgkJCQkJfQ0KCQkJCX0NCgkJCQljYXRjaCAoWmlwRXhjZXB0aW9uIGV4KSB7DQoJCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJDYW5ub3QgdW5wYWNrICIgKyBmLmdldE5hbWUoKQ0KCQkJCQkJCSsgIiwgbm8gdmFsaWQgemlwIGZpbGUiKTsNCgkJCQl9DQoJCQkJY2F0Y2ggKElPRXhjZXB0aW9uIGV4KSB7DQoJCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJVbnBhY2tpbmcgb2YgIiArIGYuZ2V0TmFtZSgpDQoJCQkJCQkJKyAiIGFib3J0ZWQuIEVycm9yOiAiICsgZXgpOw0KCQkJCX0NCgkJCX0NCgkJfQ0KCQkvLyBEZWxldGUgRmlsZXMNCgkJZWxzZSBpZiAoKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKSAhPSBudWxsKQ0KCQkJCSYmIChyZXF1ZXN0LmdldFBhcmFtZXRlcigiU3VibWl0IikuZXF1YWxzKERFTEVURV9GSUxFUykpKSB7DQoJCQlWZWN0b3IgdiA9IGV4cGFuZEZpbGVMaXN0KHJlcXVlc3QuZ2V0UGFyYW1ldGVyVmFsdWVzKCJzZWxmaWxlIiksIHRydWUpOw0KCQkJYm9vbGVhbiBlcnJvciA9IGZhbHNlOw0KCQkJLy9kZWxldGUgYmFja3dhcmRzDQoJCQlmb3IgKGludCBpID0gdi5zaXplKCkgLSAxOyBpID49IDA7IGktLSkgew0KCQkJCUZpbGUgZiA9IChGaWxlKSB2LmdldChpKTsNCiAgICAgICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChmLCB0cnVlKSl7DQogICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyAiICsgZi5nZXRBYnNvbHV0ZVBhdGgoKSk7DQogICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KCQkJCWlmICghZi5jYW5Xcml0ZSgpIHx8ICFmLmRlbGV0ZSgpKSB7DQoJCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJDYW5ub3QgZGVsZXRlICIgKyBmLmdldEFic29sdXRlUGF0aCgpDQoJCQkJCQkJKyAiLiBEZWxldGlvbiBhYm9ydGVkIik7DQoJCQkJCWVycm9yID0gdHJ1ZTsNCgkJCQkJYnJlYWs7DQoJCQkJfQ0KCQkJfQ0KCQkJaWYgKCghZXJyb3IpICYmICh2LnNpemUoKSA+IDEpKSByZXF1ZXN0 
LnNldEF0dHJpYnV0ZSgibWVzc2FnZSIsICJBbGwgZmlsZXMgZGVsZXRlZCIpOw0KCQkJZWxzZSBpZiAoKCFlcnJvcikgJiYgKHYuc2l6ZSgpID4gMCkpIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJtZXNzYWdlIiwgIkZpbGUgZGVsZXRlZCIpOw0KCQkJZWxzZSBpZiAoIWVycm9yKSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiTm8gZmlsZXMgc2VsZWN0ZWQiKTsNCgkJfQ0KCQkvLyBDcmVhdGUgRGlyZWN0b3J5DQoJCWVsc2UgaWYgKChyZXF1ZXN0LmdldFBhcmFtZXRlcigiU3VibWl0IikgIT0gbnVsbCkNCgkJCQkmJiAocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIlN1Ym1pdCIpLmVxdWFscyhDUkVBVEVfRElSKSkpIHsNCgkJCVN0cmluZyBkaXIgPSAiIiArIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKTsNCgkJCVN0cmluZyBkaXJfbmFtZSA9IHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjcl9kaXIiKTsNCgkJCVN0cmluZyBuZXdfZGlyID0gZ2V0RGlyKGRpciwgZGlyX25hbWUpOw0KICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWQobmV3IEZpbGUobmV3X2RpciksIHRydWUpKXsNCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIiArIG5ld19kaXIpOw0KICAgICAgICAgICAgfQ0KCQkJZWxzZSBpZiAobmV3IEZpbGUobmV3X2RpcikubWtkaXJzKCkpIHsNCgkJCQlyZXF1ZXN0LnNldEF0dHJpYnV0ZSgibWVzc2FnZSIsICJEaXJlY3RvcnkgY3JlYXRlZCIpOw0KCQkJfQ0KCQkJZWxzZSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiQ3JlYXRpb24gb2YgZGlyZWN0b3J5ICIgKyBuZXdfZGlyICsgIiBmYWlsZWQiKTsNCgkJfQ0KCQkvLyBDcmVhdGUgYSBuZXcgZW1wdHkgZmlsZQ0KCQllbHNlIGlmICgocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIlN1Ym1pdCIpICE9IG51bGwpDQoJCQkJJiYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKS5lcXVhbHMoQ1JFQVRFX0ZJTEUpKSkgew0KCQkJU3RyaW5nIGRpciA9ICIiICsgcmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpOw0KCQkJU3RyaW5nIGZpbGVfbmFtZSA9IHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjcl9kaXIiKTsNCgkJCVN0cmluZyBuZXdfZmlsZSA9IGdldERpcihkaXIsIGZpbGVfbmFtZSk7DQogICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChuZXcgRmlsZShuZXdfZmlsZSksIHRydWUpKXsNCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIiArIG5ld19maWxlKTsNCiAgICAgICAgICAgIH0NCgkJCS8vIFRlc3QsIGlmIGZpbGVfbmFtZSBpcyBlbXB0eQ0KCQkJZWxzZSBpZiAoISIiLmVxdWFscyhmaWxlX25hbWUudHJpbSgpKSAmJiAhZmlsZV9uYW1lLmVuZHNXaXRoKEZpbGUuc2VwYXJhdG9yKSkgew0KCQkJCWlmIChuZXcgRmlsZShuZXdfZmlsZSkuY3JlYXRlTmV3RmlsZSgpKSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgibWVzc2FnZSIsDQoJCQkJCQkiRmls 
ZSBjcmVhdGVkIik7DQoJCQkJZWxzZSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiQ3JlYXRpb24gb2YgZmlsZSAiICsgbmV3X2ZpbGUgKyAiIGZhaWxlZCIpOw0KCQkJfQ0KCQkJZWxzZSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiRXJyb3I6ICIgKyBmaWxlX25hbWUgKyAiIGlzIG5vdCBhIHZhbGlkIGZpbGVuYW1lIik7DQoJCX0NCgkJLy8gUmVuYW1lIGEgZmlsZQ0KCQllbHNlIGlmICgocmVxdWVzdC5nZXRQYXJhbWV0ZXIoIlN1Ym1pdCIpICE9IG51bGwpDQoJCQkJJiYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKS5lcXVhbHMoUkVOQU1FX0ZJTEUpKSkgew0KCQkJVmVjdG9yIHYgPSBleHBhbmRGaWxlTGlzdChyZXF1ZXN0LmdldFBhcmFtZXRlclZhbHVlcygic2VsZmlsZSIpLCB0cnVlKTsNCgkJCVN0cmluZyBkaXIgPSAiIiArIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKTsNCgkJCVN0cmluZyBuZXdfZmlsZV9uYW1lID0gcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImNyX2RpciIpOw0KCQkJU3RyaW5nIG5ld19maWxlID0gZ2V0RGlyKGRpciwgbmV3X2ZpbGVfbmFtZSk7DQogICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChuZXcgRmlsZShuZXdfZmlsZSksIHRydWUpKXsNCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIiArIG5ld19maWxlKTsNCiAgICAgICAgICAgIH0NCg0KCQkJZWxzZSBpZiAodi5zaXplKCkgPD0gMCkgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwNCgkJCQkJIlNlbGVjdCBleGFjdGx5IG9uZSBmaWxlIG9yIGZvbGRlci4gUmVuYW1lIGZhaWxlZCIpOw0KCQkJLy8gMmEpIE11bHRpcGxlIGZpbGVzIHNlbGVjdGVkIGFuZCB0aGUgZmlyc3QgaXNuJ3QgYSBkaXINCgkJCS8vICAgICBIZXJlIHdlIGFzc3VtZSB0aGF0IGV4cGFuZEZpbGVMaXN0IGJ1aWxkcyB2IGZyb20gdG9wLWJvdHRvbSwgc3RhcnRpbmcgd2l0aCB0aGUgZGlycw0KCQkJZWxzZSBpZiAoKHYuc2l6ZSgpID4gMSkgJiYgISgoKEZpbGUpIHYuZ2V0KDApKS5pc0RpcmVjdG9yeSgpKSkgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoDQoJCQkJCSJlcnJvciIsICJTZWxlY3QgZXhhY3RseSBvbmUgZmlsZSBvciBmb2xkZXIuIFJlbmFtZSBmYWlsZWQiKTsNCgkJCS8vIDJiKSBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgZmlsZXMgZnJvbSB0aGUgc2FtZSBkaXJlY3RvcnksIHJlbmFtZSBmYWlscw0KCQkJZWxzZSBpZiAoKHYuc2l6ZSgpID4gMSkgJiYgKChGaWxlKSB2LmdldCgwKSkuaXNEaXJlY3RvcnkoKQ0KCQkJCQkmJiAhKCgoRmlsZSkgdi5nZXQoMCkpLmdldFBhdGgoKS5lcXVhbHMoKChGaWxlKSB2LmdldCgxKSkuZ2V0UGFyZW50KCkpKSkgew0KCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJTZWxlY3QgZXhhY3RseSBvbmUgZmlsZSBvciBmb2xkZXIuIFJlbmFtZSBmYWlsZWQiKTsNCgkJCX0NCgkJCWVsc2Ugew0KCQkJCUZpbGUgZiA9IChGaWxlKSB2LmdldCgwKTsNCiAgICAgICAg 
ICAgICAgICBpZiAoIWlzQWxsb3dlZChmLCB0cnVlKSl7DQogICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyAiICsgZi5nZXRBYnNvbHV0ZVBhdGgoKSk7DQogICAgICAgICAgICAgICAgfQ0KCQkJCS8vIFRlc3QsIGlmIGZpbGVfbmFtZSBpcyBlbXB0eQ0KCQkJCWVsc2UgaWYgKChuZXdfZmlsZS50cmltKCkgIT0gIiIpICYmICFuZXdfZmlsZS5lbmRzV2l0aChGaWxlLnNlcGFyYXRvcikpIHsNCgkJCQkJaWYgKCFmLmNhbldyaXRlKCkgfHwgIWYucmVuYW1lVG8obmV3IEZpbGUobmV3X2ZpbGUudHJpbSgpKSkpIHsNCgkJCQkJCXJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJDcmVhdGlvbiBvZiBmaWxlICIgKyBuZXdfZmlsZSArICIgZmFpbGVkIik7DQoJCQkJCX0NCgkJCQkJZWxzZSByZXF1ZXN0LnNldEF0dHJpYnV0ZSgibWVzc2FnZSIsICJSZW5hbWVkIGZpbGUgIg0KCQkJCQkJCSsgKChGaWxlKSB2LmdldCgwKSkuZ2V0TmFtZSgpICsgIiB0byAiICsgbmV3X2ZpbGUpOw0KCQkJCX0NCgkJCQllbHNlIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJFcnJvcjogXCIiICsgbmV3X2ZpbGVfbmFtZQ0KCQkJCQkJKyAiXCIgaXMgbm90IGEgdmFsaWQgZmlsZW5hbWUiKTsNCgkJCX0NCgkJfQ0KCQkvLyBNb3ZlIHNlbGVjdGVkIGZpbGUocykNCgkJZWxzZSBpZiAoKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKSAhPSBudWxsKQ0KCQkJCSYmIChyZXF1ZXN0LmdldFBhcmFtZXRlcigiU3VibWl0IikuZXF1YWxzKE1PVkVfRklMRVMpKSkgew0KCQkJVmVjdG9yIHYgPSBleHBhbmRGaWxlTGlzdChyZXF1ZXN0LmdldFBhcmFtZXRlclZhbHVlcygic2VsZmlsZSIpLCB0cnVlKTsNCgkJCVN0cmluZyBkaXIgPSAiIiArIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKTsNCgkJCVN0cmluZyBkaXJfbmFtZSA9IHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjcl9kaXIiKTsNCgkJCVN0cmluZyBuZXdfZGlyID0gZ2V0RGlyKGRpciwgZGlyX25hbWUpOw0KICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWQobmV3IEZpbGUobmV3X2RpciksIGZhbHNlKSl7DQogICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyBuZXdfZGlyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2V7DQogICAgCQkJYm9vbGVhbiBlcnJvciA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IG5ld19kaXIgaXMgYSBkaXJlY3RvcnkNCiAgICAgICAgICAgICAgICBpZiAoIW5ld19kaXIuZW5kc1dpdGgoRmlsZS5zZXBhcmF0b3IpKSBuZXdfZGlyICs9IEZpbGUuc2VwYXJhdG9yOw0KICAgICAgICAgICAgICAgIGZvciAoaW50IGkgPSB2LnNpemUoKSAtIDE7IGkgPj0gMDsgaS0tKSB7DQogICAgICAgICAgICAgICAgICAgIEZpbGUgZiA9IChGaWxlKSB2LmdldChpKTsNCiAgICAgICAgICAgICAgICAgICAgaWYg 
KCFpc0FsbG93ZWQoZiwgdHJ1ZSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyBmLmdldEFic29sdXRlUGF0aCgpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFmLmNhbldyaXRlKCkgfHwgIWYucmVuYW1lVG8obmV3IEZpbGUobmV3X2Rpcg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgZi5nZXRBYnNvbHV0ZVBhdGgoKS5zdWJzdHJpbmcoZGlyLmxlbmd0aCgpKSkpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiQ2Fubm90IG1vdmUgIiArIGYuZ2V0QWJzb2x1dGVQYXRoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAiLiBNb3ZlIGFib3J0ZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmICgoIWVycm9yKSAmJiAodi5zaXplKCkgPiAxKSkgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoIm1lc3NhZ2UiLCAiQWxsIGZpbGVzIG1vdmVkIik7DQogICAgICAgICAgICAgICAgZWxzZSBpZiAoKCFlcnJvcikgJiYgKHYuc2l6ZSgpID4gMCkpIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJtZXNzYWdlIiwgIkZpbGUgbW92ZWQiKTsNCiAgICAgICAgICAgICAgICBlbHNlIGlmICghZXJyb3IpIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJObyBmaWxlcyBzZWxlY3RlZCIpOw0KICAgICAgICAgICAgfQ0KCQl9DQoJCS8vIENvcHkgRmlsZXMNCgkJZWxzZSBpZiAoKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJTdWJtaXQiKSAhPSBudWxsKQ0KCQkJCSYmIChyZXF1ZXN0LmdldFBhcmFtZXRlcigiU3VibWl0IikuZXF1YWxzKENPUFlfRklMRVMpKSkgew0KCQkJVmVjdG9yIHYgPSBleHBhbmRGaWxlTGlzdChyZXF1ZXN0LmdldFBhcmFtZXRlclZhbHVlcygic2VsZmlsZSIpLCB0cnVlKTsNCgkJCVN0cmluZyBkaXIgPSAoU3RyaW5nKSByZXF1ZXN0LmdldEF0dHJpYnV0ZSgiZGlyIik7DQoJCQlpZiAoIWRpci5lbmRzV2l0aChGaWxlLnNlcGFyYXRvcikpIGRpciArPSBGaWxlLnNlcGFyYXRvcjsNCgkJCVN0cmluZyBkaXJfbmFtZSA9IHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJjcl9kaXIiKTsNCgkJCVN0cmluZyBuZXdfZGlyID0gZ2V0RGlyKGRpciwgZGlyX25hbWUpOw0KICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWQobmV3IEZpbGUobmV3X2RpciksIHRydWUpKXsNCiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiWW91IGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgIiArIG5ld19kaXIpOw0KICAgICAgICAgICAg 
fQ0KICAgICAgICAgICAgZWxzZXsNCiAgICAJCQlib29sZWFuIGVycm9yID0gZmFsc2U7DQogICAgICAgICAgICAgICAgaWYgKCFuZXdfZGlyLmVuZHNXaXRoKEZpbGUuc2VwYXJhdG9yKSkgbmV3X2RpciArPSBGaWxlLnNlcGFyYXRvcjsNCiAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBieXRlIGJ1ZmZlcltdID0gbmV3IGJ5dGVbMHhmZmZmXTsNCiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCB2LnNpemUoKTsgaSsrKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBGaWxlIGZfb2xkID0gKEZpbGUpIHYuZ2V0KGkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgRmlsZSBmX25ldyA9IG5ldyBGaWxlKG5ld19kaXIgKyBmX29sZC5nZXRBYnNvbHV0ZVBhdGgoKS5zdWJzdHJpbmcoZGlyLmxlbmd0aCgpKSk7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQWxsb3dlZChmX29sZCwgZmFsc2UpfHwgIWlzQWxsb3dlZChmX25ldywgdHJ1ZSkpew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGFjY2VzcyAiICsgZl9uZXcuZ2V0QWJzb2x1dGVQYXRoKCkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZfb2xkLmlzRGlyZWN0b3J5KCkpIGZfbmV3Lm1rZGlycygpOw0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3ZlcndyaXRpbmcgaXMgZm9yYmlkZGVuDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghZl9uZXcuZXhpc3RzKCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3B5U3RyZWFtcyhuZXcgRmlsZUlucHV0U3RyZWFtKGZfb2xkKSwgbmV3IEZpbGVPdXRwdXRTdHJlYW0oZl9uZXcpLCBidWZmZXIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlsZSBleGlzdHMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiQ2Fubm90IGNvcHkgIiArIGZfb2xkLmdldEFic29sdXRlUGF0aCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICIsIGZpbGUgYWxyZWFkeSBleGlzdHMuIENvcHlpbmcgYWJvcnRlZCIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiRXJyb3IgIiArIGUgKyAiLiBDb3B5 
aW5nIGFib3J0ZWQiKTsNCiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBpZiAoKCFlcnJvcikgJiYgKHYuc2l6ZSgpID4gMSkpIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJtZXNzYWdlIiwgIkFsbCBmaWxlcyBjb3BpZWQiKTsNCiAgICAgICAgICAgICAgICBlbHNlIGlmICgoIWVycm9yKSAmJiAodi5zaXplKCkgPiAwKSkgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoIm1lc3NhZ2UiLCAiRmlsZSBjb3BpZWQiKTsNCiAgICAgICAgICAgICAgICBlbHNlIGlmICghZXJyb3IpIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJlcnJvciIsICJObyBmaWxlcyBzZWxlY3RlZCIpOw0KICAgICAgICAgICAgfQ0KCQl9DQoJCS8vIERpcmVjdG9yeSB2aWV3ZXINCgkJaWYgKGRpcl92aWV3ICYmIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSAhPSBudWxsKSB7DQoJCQlGaWxlIGYgPSBuZXcgRmlsZSgiIiArIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSk7DQoJCQkvL0NoZWNrLCB3aGV0aGVyIHRoZSBkaXIgZXhpc3RzDQoJCQlpZiAoIWYuZXhpc3RzKCkgfHwgIWlzQWxsb3dlZChmLCBmYWxzZSkpIHsNCgkJCQlpZiAoIWYuZXhpc3RzKCkpew0KICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnNldEF0dHJpYnV0ZSgiZXJyb3IiLCAiRGlyZWN0b3J5ICIgKyBmLmdldEFic29sdXRlUGF0aCgpICsgIiBkb2VzIG5vdCBleGlzdC4iKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZWxzZXsNCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5zZXRBdHRyaWJ1dGUoImVycm9yIiwgIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gYWNjZXNzICIgKyBmLmdldEFic29sdXRlUGF0aCgpKTsNCiAgICAgICAgICAgICAgICB9DQoNCgkJCQlpZiAocmVxdWVzdC5nZXRBdHRyaWJ1dGUoIm9sZGRpciIpICE9IG51bGwgJiYgaXNBbGxvd2VkKG5ldyBGaWxlKChTdHJpbmcpIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJvbGRkaXIiKSksIGZhbHNlKSkgew0KCQkJCQlmID0gbmV3IEZpbGUoIiIgKyByZXF1ZXN0LmdldEF0dHJpYnV0ZSgib2xkZGlyIikpOw0KCQkJCX0NCg0KCQkJCWVsc2Ugew0KCQkJCQlpZiAoZi5nZXRQYXJlbnQoKSAhPSBudWxsICYmIGlzQWxsb3dlZChmLCBmYWxzZSkpIGYgPSBuZXcgRmlsZShmLmdldFBhcmVudCgpKTsNCgkJCQl9DQoNCgkJCQlpZiAoIWYuZXhpc3RzKCkpIHsNCgkJCQkJU3RyaW5nIHBhdGggPSBudWxsOw0KCQkJCQlpZiAoYXBwbGljYXRpb24uZ2V0UmVhbFBhdGgocmVxdWVzdC5nZXRSZXF1ZXN0VVJJKCkpICE9IG51bGwpIHBhdGggPSBuZXcgRmlsZSgNCgkJCQkJCQlhcHBsaWNhdGlvbi5nZXRSZWFsUGF0aChyZXF1ZXN0LmdldFJlcXVlc3RVUkkoKSkpLmdldFBhcmVudCgpOw0KDQoJCQkJCWlmIChwYXRoID09IG51bGwpIC8vIGhhbmRsZSB0aGUgY2FzZSB3ZXJlIHdlIGFyZSBub3QgaW4gYSBkaXJlY3RvcnkgKGV4OiB3YXIgZmlsZSkNCgkJCQkJcGF0aCA9IG5ldyBGaWxlKCIuIikuZ2V0QWJzb2x1dGVQYXRo 
KCk7DQoJCQkJCWYgPSBuZXcgRmlsZShwYXRoKTsNCgkJCQl9DQoJCQkJaWYgKGlzQWxsb3dlZChmLCBmYWxzZSkpIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJkaXIiLCBmLmdldEFic29sdXRlUGF0aCgpKTsNCiAgICAgICAgICAgICAgICBlbHNlIHJlcXVlc3Quc2V0QXR0cmlidXRlKCJkaXIiLCBudWxsKTsNCgkJCX0NCiU+DQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSI8JT1icm93c2VyX25hbWUgJT4/SmF2YXNjcmlwdCI+DQo8L3NjcmlwdD4NCjx0aXRsZT48JT1yZXF1ZXN0LmdldEF0dHJpYnV0ZSgiZGlyIiklPjwvdGl0bGU+DQo8L2hlYWQ+DQo8Ym9keT4NCjwlDQoJCQkvL091dHB1dCBtZXNzYWdlDQoJCQlpZiAocmVxdWVzdC5nZXRBdHRyaWJ1dGUoIm1lc3NhZ2UiKSAhPSBudWxsKSB7DQoJCQkJb3V0LnByaW50bG4oIjx0YWJsZSBib3JkZXI9XCIwXCIgd2lkdGg9XCIxMDAlXCI+PHRyPjx0ZCBjbGFzcz1cIm1lc3NhZ2VcIj4iKTsNCgkJCQlvdXQucHJpbnRsbihyZXF1ZXN0LmdldEF0dHJpYnV0ZSgibWVzc2FnZSIpKTsNCgkJCQlvdXQucHJpbnRsbigiPC90ZD48L3RyPjwvdGFibGU+Iik7DQoJCQl9DQoJCQkvL091dHB1dCBlcnJvcg0KCQkJaWYgKHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJlcnJvciIpICE9IG51bGwpIHsNCgkJCQlvdXQucHJpbnRsbigiPHRhYmxlIGJvcmRlcj1cIjBcIiB3aWR0aD1cIjEwMCVcIj48dHI+PHRkIGNsYXNzPVwiZXJyb3JcIj4iKTsNCgkJCQlvdXQucHJpbnRsbihyZXF1ZXN0LmdldEF0dHJpYnV0ZSgiZXJyb3IiKSk7DQoJCQkJb3V0LnByaW50bG4oIjwvdGQ+PC90cj48L3RhYmxlPiIpOw0KCQkJfQ0KICAgICAgICAgICAgaWYgKHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSAhPSBudWxsKXsNCg0KCQkJLy8gT3V0cHV0IHRoZSB0YWJsZSwgc3RhcnRpbmcgd2l0aCB0aGUgaGVhZGVycy4NCgkJCVN0cmluZyBkaXIgPSBVUkxFbmNvZGVyLmVuY29kZSgiIiArIHJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSk7DQoJCQlTdHJpbmcgY21kID0gYnJvd3Nlcl9uYW1lICsgIj9kaXI9IiArIGRpcjsNCgkJCWludCBzb3J0TW9kZSA9IDE7DQolPg0KPG9sIGNsYXNzPSJicmVhZGNydW1iIj4gPCU9IGRpcjJsaW5rQnJlYWRjcnVtYnMoKFN0cmluZykgcmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpLCBicm93c2VyX25hbWUsIHNvcnRNb2RlKSU+ICAgICAgPC9vbD4NCjxiciAvPg0KCTxmb3JtIGNsYXNzPSJmb3JtdWxhciIgYWN0aW9uPSI8JT0gYnJvd3Nlcl9uYW1lICU+IiBtZXRob2Q9IlBvc3QiIG5hbWU9IkZpbGVMaXN0Ij4NCiAgICBGaWxlbmFtZSBmaWx0ZXI6IDxpbnB1dCBuYW1lPSJmaWx0IiBvbktleXByZXNzPSJldmVudC5jYW5jZWxCdWJibGU9dHJ1ZTsiIG9ua2V5dXA9ImZpbHRlcih0aGlzKSIgdHlwZT0idGV4dCI+Jm5ic3A7ICZuYnNwOw0KICAgIEZpbGUgcGF0aDogPGZvbnQgc3R5bGU9J2NvbG9yOiNGRjQ1MDAnPjwlb3V0LnByaW50bG4ocmVxdWVzdC5nZXRSZWFsUGF0aCgiLyIpKTslPjwvZm9udD4mbmJzcDsgJm5ic3A7DQog 
ICAgT1M6IDxmb250IHN0eWxlPSdjb2xvcjojRkY0NTAwJz48JW91dC5wcmludGxuKFN5c3RlbS5nZXRQcm9wZXJ0eSgib3MubmFtZSIpKTslPjwvZm9udD4mbmJzcDsgJm5ic3A7DQogICAgPCUgb3V0LnByaW50bG4oIjxhIGhyZWY9Jz9teWFjdGlvbj1leGl0JyBzdHlsZT0nY29sb3I6I0ZGNDUwMCc+WyBMb2dvdXQgXTwvYT4iKTslPg0KDQogICAgPGJyIC8+PGJyIC8+DQoJPHRhYmxlIGlkPSJmaWxldGFibGUiIGNsYXNzPSJmaWxlbGlzdCIgY2VsbHNwYWNpbmc9IjFweCIgY2VsbHBhZGRpbmc9IjBweCI+DQo8JQ0KCQkJaWYgKHJlcXVlc3QuZ2V0UGFyYW1ldGVyKCJzb3J0IikgIT0gbnVsbCkgc29ydE1vZGUgPSBJbnRlZ2VyLnBhcnNlSW50KHJlcXVlc3QNCgkJCQkJLmdldFBhcmFtZXRlcigic29ydCIpKTsNCgkJCWludFtdIHNvcnQgPSBuZXcgaW50W10gezEsIDIsIDMsIDR9Ow0KCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBzb3J0Lmxlbmd0aDsgaSsrKQ0KCQkJCWlmIChzb3J0W2ldID09IHNvcnRNb2RlKSBzb3J0W2ldID0gLXNvcnRbaV07DQoJCQlvdXQucHJpbnQoIjx0cj48dGg+Jm5ic3A7PC90aD48dGggdGl0bGU9XCJTb3J0IGZpbGVzIGJ5IG5hbWVcIiBhbGlnbj1sZWZ0PjxhIGhyZWY9XCIiDQoJCQkJCSsgY21kICsgIiZhbXA7c29ydD0iICsgc29ydFswXSArICJcIj5OYW1lPC9hPjwvdGg+Ig0KCQkJCQkrICI8dGggdGl0bGU9XCJTb3J0IGZpbGVzIGJ5IHNpemVcIiBhbGlnbj1cInJpZ2h0XCI+PGEgaHJlZj1cIiIgKyBjbWQNCgkJCQkJKyAiJmFtcDtzb3J0PSIgKyBzb3J0WzFdICsgIlwiPlNpemU8L2E+PC90aD4iDQoJCQkJCSsgIjx0aCB0aXRsZT1cIlNvcnQgZmlsZXMgYnkgdHlwZVwiIGFsaWduPVwiY2VudGVyXCI+PGEgaHJlZj1cIiIgKyBjbWQNCgkJCQkJKyAiJmFtcDtzb3J0PSIgKyBzb3J0WzNdICsgIlwiPlR5cGU8L2E+PC90aD4iDQoJCQkJCSsgIjx0aCB0aXRsZT1cIlNvcnQgZmlsZXMgYnkgZGF0ZVwiIGFsaWduPVwibGVmdFwiPjxhIGhyZWY9XCIiICsgY21kDQoJCQkJCSsgIiZhbXA7c29ydD0iICsgc29ydFsyXSArICJcIj5EYXRlPC9hPjwvdGg+Ig0KCQkJCQkrICI8dGg+Jm5ic3A7PC90aD4iKTsNCgkJCWlmICghUkVBRF9PTkxZKSBvdXQucHJpbnQgKCI8dGg+Jm5ic3A7PC90aD4iKTsNCgkJCW91dC5wcmludGxuKCI8L3RyPiIpOw0KCQkJY2hhciB0cmVubmVyID0gRmlsZS5zZXBhcmF0b3JDaGFyOw0KCQkJLy8gT3V0cHV0IHRoZSBSb290LURpcnMsIHdpdGhvdXQgRk9SQklEREVOX0RSSVZFUw0KCQkJRmlsZVtdIGVudHJ5ID0gRmlsZS5saXN0Um9vdHMoKTsNCgkJCWZvciAoaW50IGkgPSAwOyBpIDwgZW50cnkubGVuZ3RoOyBpKyspIHsNCgkJCQlib29sZWFuIGZvcmJpZGRlbiA9IGZhbHNlOw0KCQkJCWZvciAoaW50IGkyID0gMDsgaTIgPCBGT1JCSURERU5fRFJJVkVTLmxlbmd0aDsgaTIrKykgew0KCQkJCQlpZiAoZW50cnlbaV0uZ2V0QWJzb2x1dGVQYXRoKCkudG9Mb3dlckNhc2UoKS5lcXVhbHMoRk9SQklEREVOX0RSSVZFU1tpMl0pKSBmb3JiaWRkZW4gPSB0 
cnVlOw0KCQkJCX0NCgkJCQlpZiAoIWZvcmJpZGRlbikgew0KCQkJCQlvdXQucHJpbnRsbigiPHRyIGNsYXNzPVwibW91c2VvdXRcIiBvbm1vdXNlb3Zlcj1cInRoaXMuY2xhc3NOYW1lPSdtb3VzZWluJ1wiIg0KCQkJCQkJCSsgIm9ubW91c2VvdXQ9XCJ0aGlzLmNsYXNzTmFtZT0nbW91c2VvdXQnXCI+Iik7DQoJCQkJCW91dC5wcmludGxuKCI8dGQ+Jm5ic3A7PC90ZD48dGQgYWxpZ249bGVmdCA+Iik7DQoJCQkJCVN0cmluZyBuYW1lID0gVVJMRW5jb2Rlci5lbmNvZGUoZW50cnlbaV0uZ2V0QWJzb2x1dGVQYXRoKCkpOw0KCQkJCQlTdHJpbmcgYnVmID0gZW50cnlbaV0uZ2V0QWJzb2x1dGVQYXRoKCk7DQoJCQkJCW91dC5wcmludGxuKCIgJm5ic3A7PGEgaHJlZj1cIiIgKyBicm93c2VyX25hbWUgKyAiP3NvcnQ9IiArIHNvcnRNb2RlDQoJCQkJCQkJKyAiJmFtcDtkaXI9IiArIG5hbWUgKyAiXCI+WyIgKyBidWYgKyAiXTwvYT4iKTsNCgkJCQkJb3V0LnByaW50KCI8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD48L3RkPjwvdHI+Iik7DQoJCQkJfQ0KCQkJfQ0KCQkJLy8gT3V0cHV0IHRoZSBwYXJlbnQgZGlyZWN0b3J5IGxpbmsgIi4uIg0KCQkJaWYgKGYuZ2V0UGFyZW50KCkgIT0gbnVsbCkgew0KCQkJCW91dC5wcmludGxuKCI8dHIgY2xhc3M9XCJtb3VzZW91dFwiIG9ubW91c2VvdmVyPVwidGhpcy5jbGFzc05hbWU9J21vdXNlaW4nXCIiDQoJCQkJCQkrICJvbm1vdXNlb3V0PVwidGhpcy5jbGFzc05hbWU9J21vdXNlb3V0J1wiPiIpOw0KCQkJCW91dC5wcmludGxuKCI8dGQ+PC90ZD48dGQgYWxpZ249bGVmdD4iKTsNCgkJCQlvdXQucHJpbnRsbigiICZuYnNwOzxhIGhyZWY9XCIiICsgYnJvd3Nlcl9uYW1lICsgIj9zb3J0PSIgKyBzb3J0TW9kZSArICImYW1wO2Rpcj0iDQoJCQkJCQkrIFVSTEVuY29kZXIuZW5jb2RlKGYuZ2V0UGFyZW50KCkpICsgIlwiPiIgKyBGT0xfSU1HICsgIlsuLl08L2E+Iik7DQoJCQkJb3V0LnByaW50KCI8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD4mbmJzcDs8L3RkPjx0ZD48L3RkPjwvdHI+Iik7DQoJCQl9DQoJCQkvLyBPdXRwdXQgYWxsIGZpbGVzIGFuZCBkaXJzIGFuZCBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiBmaWxlcyBhbmQgdG90YWwgc2l6ZQ0KCQkJZW50cnkgPSBmLmxpc3RGaWxlcygpOw0KCQkJaWYgKGVudHJ5ID09IG51bGwpIGVudHJ5ID0gbmV3IEZpbGVbXSB7fTsNCgkJCWxvbmcgdG90YWxTaXplID0gMDsgLy8gVGhlIHRvdGFsIHNpemUgb2YgdGhlIGZpbGVzIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeQ0KCQkJbG9uZyBmaWxlQ291bnQgPSAwOyAvLyBUaGUgY291bnQgb2YgZmlsZXMgaW4gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkNCgkJCWlmIChlbnRyeSAhPSBudWxsICYmIGVudHJ5Lmxlbmd0aCA+IDApIHsNCgkJCQlBcnJheXMuc29ydChlbnRyeSwgbmV3IEZpbGVDb21wKHNvcnRNb2RlKSk7DQoJCQkJZm9yIChp 
bnQgaSA9IDA7IGkgPCBlbnRyeS5sZW5ndGg7IGkrKykgew0KCQkJCQlTdHJpbmcgbmFtZSA9IFVSTEVuY29kZXIuZW5jb2RlKGVudHJ5W2ldLmdldEFic29sdXRlUGF0aCgpKTsNCgkJCQkJU3RyaW5nIHR5cGUgPSAiRmlsZSI7IC8vIFRoaXMgU3RyaW5nIHdpbGwgdGVsbCB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBmaWxlDQoJCQkJCWlmIChlbnRyeVtpXS5pc0RpcmVjdG9yeSgpKSB0eXBlID0gIkRJUiI7IC8vIEl0J3MgYSBESVINCgkJCQkJZWxzZSB7DQoJCQkJCQlTdHJpbmcgdGVtcE5hbWUgPSBlbnRyeVtpXS5nZXROYW1lKCkucmVwbGFjZSgnICcsICdfJyk7DQoJCQkJCQlpZiAodGVtcE5hbWUubGFzdEluZGV4T2YoJy4nKSAhPSAtMSkgdHlwZSA9IHRlbXBOYW1lLnN1YnN0cmluZygNCgkJCQkJCQkJdGVtcE5hbWUubGFzdEluZGV4T2YoJy4nKSkudG9Mb3dlckNhc2UoKTsNCgkJCQkJfQ0KCQkJCQlTdHJpbmcgYWhyZWYgPSAiPGEgb25tb3VzZWRvd249XCJkaXMoKVwiIGhyZWY9XCIiICsgYnJvd3Nlcl9uYW1lICsgIj9zb3J0PSINCgkJCQkJCQkrIHNvcnRNb2RlICsgIiZhbXA7IjsNCgkJCQkJU3RyaW5nIGRsaW5rID0gIiZuYnNwOyI7IC8vIFRoZSAiRG93bmxvYWQiIGxpbmsNCgkJCQkJU3RyaW5nIGVsaW5rID0gIiZuYnNwOyI7IC8vIFRoZSAiRWRpdCIgbGluaw0KCQkJCQlTdHJpbmcgYnVmID0gY29udjJIdG1sKGVudHJ5W2ldLmdldE5hbWUoKSk7DQoJCQkJCWlmICghZW50cnlbaV0uY2FuV3JpdGUoKSkgYnVmID0gIjxpPiIgKyBidWYgKyAiPC9pPiI7DQoJCQkJCVN0cmluZyBsaW5rID0gYnVmOyAvLyBUaGUgc3RhbmRhcmQgdmlldyBsaW5rLCB1c2VzIE1pbWUtdHlwZQ0KCQkJCQlpZiAoZW50cnlbaV0uaXNEaXJlY3RvcnkoKSkgew0KCQkJCQkJaWYgKGVudHJ5W2ldLmNhblJlYWQoKSAmJiBVU0VfRElSX1BSRVZJRVcpIHsNCgkJCQkJCQkvL1Nob3cgdGhlIGZpcnN0IERJUl9QUkVWSUVXX05VTUJFUiBkaXJlY3RvcnkgZW50cmllcyBpbiBhIHRvb2x0aXANCgkJCQkJCQlGaWxlW10gZnMgPSBlbnRyeVtpXS5saXN0RmlsZXMoKTsNCgkJCQkJCQlpZiAoZnMgPT0gbnVsbCkgZnMgPSBuZXcgRmlsZVtdIHt9Ow0KCQkJCQkJCUFycmF5cy5zb3J0KGZzLCBuZXcgRmlsZUNvbXAoKSk7DQoJCQkJCQkJU3RyaW5nQnVmZmVyIGZpbGVuYW1lcyA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJCQkJCQlmb3IgKGludCBpMiA9IDA7IChpMiA8IGZzLmxlbmd0aCkgJiYgKGkyIDwgMTApOyBpMisrKSB7DQoJCQkJCQkJCVN0cmluZyBmbmFtZSA9IGNvbnYySHRtbChmc1tpMl0uZ2V0TmFtZSgpKTsNCgkJCQkJCQkJaWYgKGZzW2kyXS5pc0RpcmVjdG9yeSgpKSBmaWxlbmFtZXMuYXBwZW5kKCJbIiArIGZuYW1lICsgIl07Iik7DQoJCQkJCQkJCWVsc2UgZmlsZW5hbWVzLmFwcGVuZChmbmFtZSArICI7Iik7DQoJCQkJCQkJfQ0KCQkJCQkJCWlmIChmcy5sZW5ndGggPiBESVJfUFJFVklFV19OVU1CRVIpIGZpbGVuYW1lcy5hcHBlbmQoIi4uLiIpOw0KCQkJCQkJCWVsc2UgaWYgKGZpbGVuYW1lcy5sZW5ndGgoKSA+ 
IDApIGZpbGVuYW1lcw0KCQkJCQkJCQkJLnNldExlbmd0aChmaWxlbmFtZXMubGVuZ3RoKCkgLSAxKTsNCgkJCQkJCQlsaW5rID0gYWhyZWYgKyAiZGlyPSIgKyBuYW1lICsgIlwiIHRpdGxlPVwiIiArIGZpbGVuYW1lcyArICJcIj4iDQoJCQkJCQkJCQkrIEZPTF9JTUcgKyAiWyIgKyBidWYgKyAiXTwvYT4iOw0KCQkJCQkJfQ0KCQkJCQkJZWxzZSBpZiAoZW50cnlbaV0uY2FuUmVhZCgpKSB7DQoJCQkJCQkJbGluayA9IGFocmVmICsgImRpcj0iICsgbmFtZSArICJcIj4iICsgRk9MX0lNRyArICJbIiArIGJ1ZiArICJdPC9hPiI7DQoJCQkJCQl9DQoJCQkJCQllbHNlIGxpbmsgPSBGT0xfSU1HICsgIlsiICsgYnVmICsgIl0iOw0KCQkJCQl9DQoJCQkJCWVsc2UgaWYgKGVudHJ5W2ldLmlzRmlsZSgpKSB7IC8vRW50cnkgaXMgZmlsZQ0KCQkJCQkJdG90YWxTaXplID0gdG90YWxTaXplICsgZW50cnlbaV0ubGVuZ3RoKCk7DQoJCQkJCQlmaWxlQ291bnQgPSBmaWxlQ291bnQgKyAxOw0KCQkJCQkJaWYgKGVudHJ5W2ldLmNhblJlYWQoKSkgew0KCQkJCQkJCWRsaW5rID0gYWhyZWYgKyAiZG93bmZpbGU9IiArIG5hbWUgKyAiXCI+RG93bmxvYWQ8L2E+IjsNCgkJCQkJCQkvL0lmIHlvdSBjbGljayBhdCB0aGUgZmlsZW5hbWUNCgkJCQkJCQlpZiAoVVNFX1BPUFVQKSBsaW5rID0gYWhyZWYgKyAiZmlsZT0iICsgbmFtZSArICJcIiB0YXJnZXQ9XCJfYmxhbmtcIj4iDQoJCQkJCQkJCQkrIGJ1ZiArICI8L2E+IjsNCgkJCQkJCQllbHNlIGxpbmsgPSBhaHJlZiArICJmaWxlPSIgKyBuYW1lICsgIlwiPiIgKyBidWYgKyAiPC9hPiI7DQoJCQkJCQkJaWYgKGVudHJ5W2ldLmNhbldyaXRlKCkpIHsgLy8gVGhlIGZpbGUgY2FuIGJlIGVkaXRlZA0KCQkJCQkJCQkvL0lmIGl0IGlzIGEgemlwIG9yIGphciBGaWxlIHlvdSBjYW4gdW5wYWNrIGl0DQoJCQkJCQkJCWlmIChpc1BhY2tlZChuYW1lLCB0cnVlKSkgZWxpbmsgPSBhaHJlZiArICJ1bnBhY2tmaWxlPSIgKyBuYW1lDQoJCQkJCQkJCQkJKyAiXCI+VW5wYWNrPC9hPiI7DQoJCQkJCQkJCWVsc2UgZWxpbmsgPSBhaHJlZiArICJlZGl0ZmlsZT0iICsgbmFtZSArICJcIj5FZGl0PC9hPiI7DQoJCQkJCQkJfQ0KCQkJCQkJCWVsc2UgeyAvLyBJZiB0aGUgZmlsZSBjYW5ub3QgYmUgZWRpdGVkDQoJCQkJCQkJCS8vSWYgaXQgaXMgYSB6aXAgb3IgamFyIEZpbGUgeW91IGNhbiB1bnBhY2sgaXQNCgkJCQkJCQkJaWYgKGlzUGFja2VkKG5hbWUsIHRydWUpKSBlbGluayA9IGFocmVmICsgInVucGFja2ZpbGU9IiArIG5hbWUNCgkJCQkJCQkJCQkrICJcIj5VbnBhY2s8L2E+IjsNCgkJCQkJCQkJZWxzZSBlbGluayA9IGFocmVmICsgImVkaXRmaWxlPSIgKyBuYW1lICsgIlwiPlZpZXc8L2E+IjsNCgkJCQkJCQl9DQoJCQkJCQl9DQoJCQkJCQllbHNlIHsNCgkJCQkJCQlsaW5rID0gYnVmOw0KCQkJCQkJfQ0KCQkJCQl9DQoJCQkJCVN0cmluZyBkYXRlID0gZGF0ZUZvcm1hdC5mb3JtYXQobmV3IERhdGUoZW50cnlbaV0ubGFzdE1vZGlmaWVkKCkpKTsNCgkJCQkJb3V0LnByaW50bG4o 
Ijx0ciBjbGFzcz1cIm1vdXNlb3V0XCIgb25tb3VzZXVwPVwic2Vscm93KHRoaXMsIDIpXCIgIg0KCQkJCQkJCSsgIm9ubW91c2VvdmVyPVwic2Vscm93KHRoaXMsIDApO1wiIG9ubW91c2VvdXQ9XCJzZWxyb3codGhpcywgMSlcIj4iKTsNCgkJCQkJaWYgKGVudHJ5W2ldLmNhblJlYWQoKSkgew0KCQkJCQkJb3V0LnByaW50bG4oIjx0ZCBhbGlnbj1jZW50ZXI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJzZWxmaWxlXCIgdmFsdWU9XCIiDQoJCQkJCQkJCQkJKyBuYW1lICsgIlwiIG9ubW91c2Vkb3duPVwiZGlzKClcIj48L3RkPiIpOw0KCQkJCQl9DQoJCQkJCWVsc2Ugew0KCQkJCQkJb3V0LnByaW50bG4oIjx0ZCBhbGlnbj1jZW50ZXI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJzZWxmaWxlXCIgZGlzYWJsZWQ+PC90ZD4iKTsNCgkJCQkJfQ0KCQkJCQlvdXQucHJpbnQoIjx0ZCBhbGlnbj1sZWZ0PiAmbmJzcDsiICsgbGluayArICI8L3RkPiIpOw0KCQkJCQlpZiAoZW50cnlbaV0uaXNEaXJlY3RvcnkoKSkgb3V0LnByaW50KCI8dGQ+Jm5ic3A7PC90ZD4iKTsNCgkJCQkJZWxzZSB7DQoJCQkJCQlvdXQucHJpbnQoIjx0ZCBhbGlnbj1yaWdodCB0aXRsZT1cIiIgKyBlbnRyeVtpXS5sZW5ndGgoKSArICIgYnl0ZXNcIj4iDQoJCQkJCQkJCSsgY29udmVydEZpbGVTaXplKGVudHJ5W2ldLmxlbmd0aCgpKSArICI8L3RkPiIpOw0KCQkJCQl9DQoJCQkJCW91dC5wcmludGxuKCI8dGQgYWxpZ249XCJjZW50ZXJcIj4iICsgdHlwZSArICI8L3RkPjx0ZCBhbGlnbj1sZWZ0PiAmbmJzcDsiICsgLy8gVGhlIGZpbGUgdHlwZSAoZXh0ZW5zaW9uKQ0KCQkJCQkJCWRhdGUgKyAiPC90ZD48dGQ+IiArIC8vIFRoZSBkYXRlIHRoZSBmaWxlIHdhcyBjcmVhdGVkDQoJCQkJCQkJZGxpbmsgKyAiPC90ZD4iKTsgLy8gVGhlIGRvd25sb2FkIGxpbmsNCgkJCQkJaWYgKCFSRUFEX09OTFkpDQoJCQkJCQlvdXQucHJpbnQgKCI8dGQ+IiArIGVsaW5rICsgIjwvdGQ+Iik7IC8vIFRoZSBlZGl0IGxpbmsgKG9yIHZpZXcsIGRlcGVuZGluZykNCgkJCQkJb3V0LnByaW50bG4oIjwvdHI+Iik7DQoJCQkJfQ0KCQkJfSU+DQoJPC90YWJsZT4NCgk8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5hbWU9InNlbGFsbCIgb25DbGljaz0iQWxsRmlsZXModGhpcy5mb3JtKSI+U2VsZWN0IGFsbA0KCTxwIGFsaWduPWNlbnRlciBjbGFzcz0nYnJlYWRjcnVtYicgc3R5bGU9J2NvbG9yOiAjNjY2Jz4NCgkJPGIgdGl0bGU9IjwlPXRvdGFsU2l6ZSU+IGJ5dGVzIj48JT1jb252ZXJ0RmlsZVNpemUodG90YWxTaXplKSU+PC9iPjxiPiBpbiA8JT1maWxlQ291bnQlPiBmaWxlcyBpbiA8JT0gZGlyMmxpbmtkaXIoKFN0cmluZykgcmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpLCBicm93c2VyX25hbWUsIHNvcnRNb2RlKSU+PC9iPg0KCTwvcD4NCgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGlyIiB2YWx1ZT0iPCU9cmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpJT4iPg0KCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJz 
b3J0IiB2YWx1ZT0iPCU9c29ydE1vZGUlPiI+DQoJCTxpbnB1dCB0aXRsZT0iRG93bmxvYWQgc2VsZWN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIGFzIG9uZSB6aXAgZmlsZSIgY2xhc3M9ImJ1dHRvbiIgaWQ9ImJ1dF9aaXAiIHR5cGU9IlN1Ym1pdCIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iPCU9U0FWRV9BU19aSVAlPiI+DQoJCTwlIGlmICghUkVBRF9PTkxZKSB7JT4NCgkJCTxpbnB1dCB0aXRsZT0iRGVsZXRlIGFsbCBzZWxlY3RlZCBmaWxlcyBhbmQgZGlyZWN0b3JpZXMgaW5jbC4gc3ViZGlycyIgY2xhc3M9ImJ1dHRvbiIgIGlkPSJidXRfRGVsIiB0eXBlPSJTdWJtaXQiIG5hbWU9IlN1Ym1pdCIgdmFsdWU9IjwlPURFTEVURV9GSUxFUyU+Ig0KCQkJb25jbGljaz0icmV0dXJuIGNvbmZpcm0oJ0RvIHlvdSByZWFsbHkgd2FudCB0byBkZWxldGUgdGhlIGVudHJpZXM/JykiPg0KCQk8JSB9ICU+DQoJPCUgaWYgKCFSRUFEX09OTFkpIHslPg0KCTxiciAvPg0KCQk8aW5wdXQgdGl0bGU9IkVudGVyIG5ldyBkaXIgb3IgZmlsZW5hbWUgb3IgdGhlIHJlbGF0aXZlIG9yIGFic29sdXRlIHBhdGgiIGNsYXNzPSJ0ZXh0ZmllbGQiIHR5cGU9InRleHQiIG9uS2V5cHJlc3M9ImV2ZW50LmNhbmNlbEJ1YmJsZT10cnVlOyIgaWQ9InRleHRfRGlyIiBuYW1lPSJjcl9kaXIiPg0KCQk8aW5wdXQgdGl0bGU9IkNyZWF0ZSBhIG5ldyBkaXJlY3Rvcnkgd2l0aCB0aGUgZ2l2ZW4gbmFtZSIgY2xhc3M9ImJ1dHRvbiIgaWQ9ImJ1dF9ORGkiIHR5cGU9IlN1Ym1pdCIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iPCU9Q1JFQVRFX0RJUiU+Ij4NCgkJPGlucHV0IHRpdGxlPSJDcmVhdGUgYSBuZXcgZW1wdHkgZmlsZSB3aXRoIHRoZSBnaXZlbiBuYW1lIiBjbGFzcz0iYnV0dG9uIiBpZD0iYnV0X05GaSIgdHlwZT0iU3VibWl0IiBuYW1lPSJTdWJtaXQiIHZhbHVlPSI8JT1DUkVBVEVfRklMRSU+Ij4NCgkJPGlucHV0IHRpdGxlPSJNb3ZlIHNlbGVjdGVkIGZpbGVzIGFuZCBkaXJlY3RvcmllcyB0byB0aGUgZW50ZXJlZCBwYXRoIiBpZD0iYnV0X01vdiIgY2xhc3M9ImJ1dHRvbiIgdHlwZT0iU3VibWl0IiBuYW1lPSJTdWJtaXQiIHZhbHVlPSI8JT1NT1ZFX0ZJTEVTJT4iPg0KCQk8aW5wdXQgdGl0bGU9IkNvcHkgc2VsZWN0ZWQgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHRvIHRoZSBlbnRlcmVkIHBhdGgiIGlkPSJidXRfQ29wIiBjbGFzcz0iYnV0dG9uIiB0eXBlPSJTdWJtaXQiIG5hbWU9IlN1Ym1pdCIgdmFsdWU9IjwlPUNPUFlfRklMRVMlPiI+DQoJCTxpbnB1dCB0aXRsZT0iUmVuYW1lIHNlbGVjdGVkIGZpbGUgb3IgZGlyZWN0b3J5IHRvIHRoZSBlbnRlcmVkIG5hbWUiIGlkPSJidXRfUmVuIiBjbGFzcz0iYnV0dG9uIiB0eXBlPSJTdWJtaXQiIG5hbWU9IlN1Ym1pdCIgdmFsdWU9IjwlPVJFTkFNRV9GSUxFJT4iPg0KCTwlIH0gJT4NCgk8L2Zvcm0+DQoJPGJyIC8+DQoJPGRpdiBjbGFzcz0iZm9ybXVsYXIiPg0KCTwlIGlmIChBTExPV19VUExPQUQpIHsgJT4NCgk8Zm9ybSBjbGFzcz0iZm9ybXVsYXIyIiBhY3Rpb249IjwlPSBicm93 
c2VyX25hbWUlPiIgZW5jdHlwZT0ibXVsdGlwYXJ0L2Zvcm0tZGF0YSIgbWV0aG9kPSJQT1NUIj4NCgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZGlyIiB2YWx1ZT0iPCU9cmVxdWVzdC5nZXRBdHRyaWJ1dGUoImRpciIpJT4iPg0KCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJzb3J0IiB2YWx1ZT0iPCU9c29ydE1vZGUlPiI+DQoJCTxpbnB1dCB0eXBlPSJmaWxlIiBjbGFzcz0idGV4dGZpZWxkIiBvbktleXByZXNzPSJldmVudC5jYW5jZWxCdWJibGU9dHJ1ZTsiIG5hbWU9Im15RmlsZSI+DQoJCTxpbnB1dCB0aXRsZT0iVXBsb2FkIHNlbGVjdGVkIGZpbGUgdG8gdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkiIHR5cGU9IlN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iPCU9VVBMT0FEX0ZJTEVTJT4iDQoJCW9uQ2xpY2s9ImphdmFzY3JpcHQ6cG9wVXAoJzwlPSBicm93c2VyX25hbWUlPicpIj4NCgk8L2Zvcm0+DQoJPCV9ICU+DQoJPCUgaWYgKE5BVElWRV9DT01NQU5EUykgeyU+DQogICAgPGZvcm0gY2xhc3M9ImZvcm11bGFyMiIgYWN0aW9uPSI8JT0gYnJvd3Nlcl9uYW1lJT4iIG1ldGhvZD0iUE9TVCI+DQoJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImRpciIgdmFsdWU9IjwlPXJlcXVlc3QuZ2V0QXR0cmlidXRlKCJkaXIiKSU+Ij4NCgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ic29ydCIgdmFsdWU9IjwlPXNvcnRNb2RlJT4iPg0KCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJjb21tYW5kIiB2YWx1ZT0iIj4NCgkJPGlucHV0IHRpdGxlPSJMYXVuY2ggY29tbWFuZCBpbiBjdXJyZW50IGRpcmVjdG9yeSIgdHlwZT0iU3VibWl0IiBjbGFzcz0iYnV0dG9uIiBpZD0iYnV0X0xhdSIgbmFtZT0iU3VibWl0IiB2YWx1ZT0iPCU9TEFVTkNIX0NPTU1BTkQlPiI+DQoJPC9mb3JtPjwlDQogICAgfSU+DQogICAgPC9kaXY+DQogICAgPCV9JT4NCjwvYm9keT4NCjwvaHRtbD48JQ0KICAgIH0NCiU+DQo= 
